<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>欧拉函数</title>
      <link href="/2024/08/08/suan-fa/ou-la-han-shu/"/>
      <url>/2024/08/08/suan-fa/ou-la-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h1><p><strong>求1-n中所有与n互质的数，的个数被称为欧拉函数</strong></p><p>ϕ(N) &#x3D; N×（1-1&#x2F;p1）×（1-1&#x2F;p2）×…×（1−1&#x2F;pm）</p><p>p是n的所有质因数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> res <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> res <span class="token operator">/</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//N*（1-1/p1）</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">/=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">/</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>辗转相除法</title>
      <link href="/2024/08/08/suan-fa/zhan-zhuan-xiang-chu-fa/"/>
      <url>/2024/08/08/suan-fa/zhan-zhuan-xiang-chu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h1><p>原理：<code>gcd(a,b)==gcd(a,a-b)</code>-&gt;<code>gcd(a,b)==gcd(a,a-n*b)</code>-&gt;<code>gcd(a,b)==gcd(a,a%b)</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span> b <span class="token punctuation">,</span> a <span class="token operator">%</span> b <span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筛质数</title>
      <link href="/2024/08/07/suan-fa/shai-zhi-shu/"/>
      <url>/2024/08/07/suan-fa/shai-zhi-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h2><h3 id="埃氏筛法"><a href="#埃氏筛法" class="headerlink" title="埃氏筛法"></a>埃氏筛法</h3><p>复杂度O(n) </p><p><strong>一般用于预处理前n项的质数个数（多组数据）</strong> </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//判断有没有被筛过 </span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1e7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//如果没删过 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">*</span>i<span class="token operator">&lt;=</span><span class="token number">1e7</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                b<span class="token punctuation">[</span>i<span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token comment">//把他的倍数删掉 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1e7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求前缀和 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线性筛法"><a href="#线性筛法" class="headerlink" title="线性筛法"></a>线性筛法</h3><p><strong>直接记录质数的个数并把每个质数加到数组里面</strong> </p><p>感觉这个好用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//有几个质数 </span>bool b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//判断有没有被筛过 </span><span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//没筛过，是质数，加到数组里面 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            b<span class="token punctuation">[</span>i<span class="token operator">*</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token comment">//把质数的倍数筛掉 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2024/08/07/suan-fa/kuai-su-mi/"/>
      <url>/2024/08/07/suan-fa/kuai-su-mi/</url>
      
        <content type="html"><![CDATA[<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment">//a的k次方%p </span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token comment">//k转化成二进制 </span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>res<span class="token operator">*</span>a<span class="token operator">%</span>p<span class="token punctuation">;</span>        k<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>a<span class="token operator">*</span>a<span class="token operator">%</span>p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分</title>
      <link href="/2024/08/07/suan-fa/er-fen/"/>
      <url>/2024/08/07/suan-fa/er-fen/</url>
      
        <content type="html"><![CDATA[<h2 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 一个mid = (l+r)>>1</span><span class="token comment">// 一个mid = (l+r+1)>>1</span><span class="token comment">// 加不加1 完全取决于 l = mid 还是r = mid</span><span class="token comment">// l等于mid时必须+1向上取整 不然会陷入l=l的死循环</span><span class="token comment">// r = mid 时候不用加1 因为下一步l = r 直接会退出循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮点二分"><a href="#浮点二分" class="headerlink" title="浮点二分"></a>浮点二分</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">&lt;</span><span class="token number">1e-9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token operator">=</span>mid<span class="token punctuation">;</span>    <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">-</span>r<span class="token operator">></span><span class="token number">1e-9</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端</title>
      <link href="/2024/08/06/bi-ji/qian-duan/"/>
      <url>/2024/08/06/bi-ji/qian-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>21.p61</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        内容    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>不区分大小写</li><li>标签属性用单双引号都可以</li><li>语法松散，写错了也问题不大</li></ol><h3 id="①标题"><a href="#①标题" class="headerlink" title="①标题"></a>①标题</h3><p>test6</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><ol><li>标题标签：<h1><h6></li><li>水平线标签<hr></li><li>图片标签<img src="" width="……" height="……"></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--        img标签：                src：图片资源路径                width：宽度                height：高度        路径书写方式：                绝对路径：                1.绝对磁盘路径                2.绝对网络路径        相对路径：                 ./  :本目录下内容，可省略                ../  :上一级目录         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(路径)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>新浪新闻>正文        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>震惊！！某人被狙了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        特朗普竞选集会现场现枪声        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-引用CSS"><a href="#2-引用CSS" class="headerlink" title="2.引用CSS"></a>2.引用CSS</h4><ol><li><p>行内样式：卸载标签的style属性中，只改变当前内容</p></li><li><p>内嵌样式写在sytle标签中（一般写在head中）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">h1</span><span class="token punctuation">&#123;</span>        <span class="token property">xxx</span><span class="token punctuation">:</span>xxx        例如color：red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外联样式：写在单独的.css文件中（需要通过link标签在网页内引入）</p></li></ol><h4 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h4><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061934920.png"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">内嵌式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">h1</span><span class="token punctuation">&#123;</span>          h1表示指定是谁的属性h1<span class="token punctuation">,</span>h2等        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>外联式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>news.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h4><p>没有意义的标签，用来给一些没有属性的正文修饰</p><h5 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h5><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061934921.png"></p><p>优先级：id&gt;类&gt;元素</p><h5 id="CSS属性"><a href="#CSS属性" class="headerlink" title="CSS属性"></a>CSS属性</h5><ol><li>color:设置文本颜色</li><li>font-size:字体大小</li></ol><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><p>标签：<code>&lt;a&gt;</code></p><p>属性：</p><ol><li>href：指定访问的页面</li><li>target：指定在何处打开链接<ol><li>_self：默认值，当前页面打开</li><li>_blank：在空白页面打开</li></ol></li></ol><h5 id="CSS属性-1"><a href="#CSS属性-1" class="headerlink" title="CSS属性"></a>CSS属性</h5><ol><li>text-decoration：添加文本修饰（下划线，双线之类的）none：标准文本</li><li>color：定义颜色</li></ol><h3 id="②正文"><a href="#②正文" class="headerlink" title="②正文"></a>②正文</h3><h4 id="标签-1"><a href="#标签-1" class="headerlink" title="标签"></a>标签</h4><ol><li>视频标签 <code>&lt;video&gt;</code><ol><li>src：规定视频的url（就是打开的  网址&#x2F;路径  在哪）</li><li>controls：显示播放控件（暂停，倍速之类的）</li><li>width：播放器宽度</li><li>height：播放器高度</li></ol></li><li>音频标签<code>&lt;audio&gt;</code><ol><li>src：规定视频的url（同上）</li><li>controls：显示播放控件（同上）</li></ol></li><li>换行<code>&lt;br&gt;</code></li><li>段落标签<code>&lt;p&gt;</code></li><li>文本加粗标签<code>&lt;b&gt;/&lt;strong&gt;</code></li></ol><h5 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h5><ol><li>line-height：设置行高</li><li>text-indent：定义第一个行内容的缩进（缩进几个px）</li><li>text-align：定义文本对齐方式（多对齐，右对齐，居中对齐）</li></ol><p>&amp;nbsp加在正文里面是空格的意思</p><h3 id="③布局"><a href="#③布局" class="headerlink" title="③布局"></a>③布局</h3><h4 id="盒子模型："><a href="#盒子模型：" class="headerlink" title="盒子模型："></a>盒子模型：</h4><p>test11</p><p>内容（content），内边距（padding），边框（border）外边距（margin）</p><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061934923.png"></p><h5 id="div"><a href="#div" class="headerlink" title="div"></a>div</h5><p>特点</p><ol><li>一行只显示一个（独占一行）</li><li>可以设置宽高（width，height）</li></ol><h6 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h6><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061934924.png"></p><h6 id="span"><a href="#span" class="headerlink" title="span"></a>span</h6><ol><li>一行可以显示多个</li><li>不可以设置宽高</li><li>由内容自动撑开</li></ol><h5 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h5><ol><li>&lt;table:定义表格</li><li>&lt;tr:定义表格中的行，一个tr代表一行</li><li>&lt;th：表示表头单元格，具有加粗居中效果</li><li>&lt; td:表示普通单元格</li></ol><h5 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h5><p><code>&lt;form&gt;</code></p><h6 id="表单项："><a href="#表单项：" class="headerlink" title="表单项："></a>表单项：</h6><p><strong>必须有name才能提交</strong></p><p>不同类型的input元素、下拉列表、文本域</p><ol><li><p>&lt;input：定义表单项，通过type属性控制输入形式（name属性相同时，就只能选一个）</p></li><li><p>&lt; select：定义下拉列表</p></li><li><p>&lt; textarea：定义文本域</p></li><li><p>&lt;label :增加选中区域</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>//点用户名也可以直接跳掉输入框<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ol><li>action：规定当提交表单时向何处发送表单数据，指定url地址</li><li>method：规定用于发送表单数据的方式。GET、POST<ol><li>get：表单数据拼接到url后面，有大小限制</li><li>post：数据在请求体中携带，无大小限制</li></ol></li></ol><h2 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="内部脚本"><a href="#内部脚本" class="headerlink" title="内部脚本"></a>内部脚本</h4><p>将JS代码定义在HTML页面中</p><ol><li>JS代码必须位于<code>&lt;script &gt;&lt;/script&gt;</code>标签之间</li><li>在HTML文档中，可以在任意地方，放任意数量的《script》</li><li>一般把脚本放在《body》元素的底部</li></ol><h4 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h4><p>将JS代码定义在外部JS文件中，然后引入到HTML中</p><p>外部文件，只包含代码，不包含《script》标签</p><h3 id="JS基础语法"><a href="#JS基础语法" class="headerlink" title="JS基础语法"></a>JS基础语法</h3><h4 id="①输出语句"><a href="#①输出语句" class="headerlink" title="①输出语句"></a>①输出语句</h4><ol><li>使用<code>window.alert()</code>写入警告框，window可省略</li><li>使用<code>document.write()</code>写入HTML页面输出</li><li>使用<code>console.log()</code>写入浏览器控制台</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在警告窗中弹出</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在页面展示出来</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在控制台输出（没啥用）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="②变量"><a href="#②变量" class="headerlink" title="②变量"></a>②变量</h4><h5 id="var"><a href="#var" class="headerlink" title="var"></a>var</h5><p>用var来声明变量，变量可以存放不同类型的值</p><p>var的作用域很大，全是全局变量，可重复定义同一个变量</p><h5 id="let"><a href="#let" class="headerlink" title="let"></a>let</h5><p>局部变量，不可重复定义同一个变量</p><h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><p>常量，不可改变</p><h4 id="③数据类型"><a href="#③数据类型" class="headerlink" title="③数据类型"></a>③数据类型</h4><ol><li>number：数字类型：小数，整数</li><li>string：字符串</li><li>boolean：布尔</li><li>undefined：如果var a；没有初始化就是这个类型</li></ol><h4 id="④运算符"><a href="#④运算符" class="headerlink" title="④运算符"></a>④运算符</h4><p>&#x3D;&#x3D;&#x3D;全等运算符</p><p>&#x3D;&#x3D;会进行类型转换</p><p>&#x3D;&#x3D;&#x3D;不会</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span>；a<span class="token operator">==</span>”<span class="token number">10</span>“<span class="token punctuation">;</span>turea<span class="token operator">===</span>”<span class="token number">10</span>“<span class="token punctuation">;</span><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="⑤类型转换"><a href="#⑤类型转换" class="headerlink" title="⑤类型转换"></a>⑤类型转换</h4><h5 id="字符串转换数字"><a href="#字符串转换数字" class="headerlink" title="字符串转换数字"></a>字符串转换数字</h5><p>parseInt从前往后遇到不是数字就停止转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12A34"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"A12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="其他类型转boolean"><a href="#其他类型转boolean" class="headerlink" title="其他类型转boolean"></a>其他类型转boolean</h5><ol><li>number：0和NaN是false，其他全是true。</li><li>string：空字符串是false，其他全是true</li><li>null和undefined是false</li></ol><h4 id="⑥函数"><a href="#⑥函数" class="headerlink" title="⑥函数"></a>⑥函数</h4><p>函数需要function来定义例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><p>形参不需要类型，返回值也不用返回值类型</p><p>调用</p><p>var c&#x3D;add（a+b）;</p><h4 id="⑦JS对象"><a href="#⑦JS对象" class="headerlink" title="⑦JS对象"></a>⑦JS对象</h4><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><p>定义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>特点：数组长度可变，所以没有数组越界一说，且可以在数组里面加入任意类型的元素</p><h6 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h6><p>forEach</p><p>length</p><p>push</p><p>splice（删除）</p><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><p>length</p><p>charAt( )</p><p>indexOf( )</p><p>trim( )</p><p>substring( )</p><h5 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h5><h6 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h6><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061934925.png"></p><p><strong>用处：因为语法简单，多用与数据载体，在网络传输</strong></p><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061933205.png"></p><h5 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h5><h6 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h6><ol><li>Window：浏览器窗口对象</li><li>Location：地址栏对象</li></ol><h6 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h6><h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6><ol><li>alert（）：显示警告框</li><li>confirm（）：显示确认按钮或者取消按钮的对话框，有返回值</li><li>setInterval（）：周期性的执行某个函数，括号里面是多少ms可执行n次</li><li>setTimeout（）：延迟指定时间执行，只执行一次，括号里面是延迟？ms</li></ol><h6 id="location"><a href="#location" class="headerlink" title="location"></a>location</h6><p>location.href&#x3D;””；&#x2F;&#x2F;路径名</p><h5 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h5><p>控制html的内容，事件</p><p>将标记语言各个部分封装成对应对象：</p><ol><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ol><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061933206.png"></p><p>注意左右颜色一一对应</p><h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><ol><li>改变HTML元素内容</li><li>改变HTML样式（CSS）</li><li>对HTML事件作出反应</li><li>添加或删除HTML元素</li></ol><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061933207.png"></p><h4 id="⑧JS监听"><a href="#⑧JS监听" class="headerlink" title="⑧JS监听"></a>⑧JS监听</h4><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061933208.png"></p><h5 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h5><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061933203.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2024/08/06/bi-ji/shu-ju-ku/"/>
      <url>/2024/08/06/bi-ji/shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>**int;**整数;<strong>double</strong>(整数＋小数长度,小数长度);小数;</p><p>**data;**日期;</p><p><strong>cahr</strong>(长度);字符串(不管输入几个字符，直接占满);   </p><p><strong>varchar</strong>(长度)字符串(存几个占几个);</p><h4 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h4><p>数据库databases</p><h5 id="1-查询所有数据库"><a href="#1-查询所有数据库" class="headerlink" title="1.查询所有数据库"></a>1.查询所有数据库</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show databases;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2.创建数据库"></a>2.创建数据库</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database 数据库名称;&#x2F;&#x2F;如果不存在才创建，存在则不进行create database if not exists 数据库名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3-删除数据库"><a href="#3-删除数据库" class="headerlink" title="3.删除数据库"></a>3.删除数据库</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop database 数据库名称;&#x2F;&#x2F;如果存在就删除drop database if exists 数据库名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="4-使用数据库"><a href="#4-使用数据库" class="headerlink" title="4.使用数据库"></a>4.使用数据库</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;查看当前使用数据库select database();&#x2F;&#x2F;使用数据库use 数据库名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h6><p>表table</p><h6 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h6><p>create table 表名(<br>    字段名1 数据类型(int,string),<br>    字段名2 数据类型,<br>    字段名3 数据类型,<br>    字段名4 数据类型<br>)</p><p>最后一个没有逗号</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;先写变量名，再写类型create table tb_user(    id int,    username varchar(20),    password varchar(32));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;查询当前数据库下所有名称show tables;&#x2F;&#x2F;查询表结构desc 表名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-修改"><a href="#3-修改" class="headerlink" title="3.修改"></a>3.修改</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;1.修改表名alter table 表名 rename to 新的表名;&#x2F;&#x2F;2.添加一列alter table 表名 add 列名 数据类型;&#x2F;&#x2F;3.修改数据类型alter table 表名 modify 列名 新数据类型;&#x2F;&#x2F;4.修改列名和数据类型alter table 表名 change 列名 新列名 新数据类型;&#x2F;&#x2F;5.删除列alter table 表名 drop 列名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop table 表名;&#x2F;&#x2F;删除表时判断表是否存在drop table if exists 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>给指定列添加元素（可以是多个列）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名(列名1，列名2…) values(值1，值2…);&#x2F;&#x2F;给全部列添加元素，可省略列名&#x2F;&#x2F;批量添加（），（），（）即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名;select (列名) from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update 表名 set 列名1&#x3D;值1，列名2&#x3D;值2 where 条件；&#x2F;&#x2F;例如update user set sex&#x3D;&#39;女&#39; where name&#x3D;&#39;张三&#39;;&#x2F;&#x2F;把所有名字是张三的性别改成女<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：如果不加where条件，表中所有数据都会被修改</strong>！！</p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete from 表名 where条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：如果不加where条件，表中所有数据都会被删除</strong>！！</p><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><p>Nacicat  stutest</p><h4 id="1-基础查询"><a href="#1-基础查询" class="headerlink" title="1.基础查询"></a>1.基础查询</h4><p>1.查询字段</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段列名  from 表名;select * from 表名;&#x2F;&#x2F;不要使用！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.查询时去除重复元素</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select distinct 字段列名 from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.起别名</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段列名 as 别名 from 表名;as可省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-条件查询"><a href="#2-条件查询" class="headerlink" title="2.条件查询"></a>2.条件查询</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 列名 from 表名 where 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h5><ol><li>等于：&#x3D;</li><li>某个范围之间：列名  between 范围1 and 范围2</li><li>或者||：or</li><li>在……之中：in（条件1，条件2……），满足一个即可</li><li>并且&amp;&amp;：and</li><li>是空：is null</li><li>不是空：is not null</li></ol><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><p>like:%表示多个字符  _表示单个字符，第一个列名可以用*表示全部</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 列名 from 表名 where 列名 like &#39;条件&#39;;例如：select * from stu where name like &#39;马%&#39;;&#x2F;&#x2F;姓马的人<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-排序查询"><a href="#3-排序查询" class="headerlink" title="3.排序查询"></a>3.排序查询</h4><p>升序asc，降序desc</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 列名 from 表名 order by 列名1 排序方式1,列名2 排序方式2……;例如：select 列名 from stu order by math desc,english asc;先按数学降序排，再按英语升序排<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>前面排序内容相同时，才用后面的排序</p><h4 id="4-分组查询"><a href="#4-分组查询" class="headerlink" title="4.分组查询"></a>4.分组查询</h4><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><p>将一列作为一个整体，纵向计算，<strong>聚合函数均不计算null</strong></p><ol><li>count(列名)：统计数量（求有几列）</li><li>max(列名)：最大值min(列名)：最小值</li><li>sum(列名)：求和（求这一列的和）</li><li>ave(列名):求平均值（求这一列的平均值）</li></ol><h6 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h6><p>列名可以用* 表示全部</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 聚合函数名(列名) from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><h6 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 分组列名，聚合函数 from 表名 where 分组前的条件 group by 分组列名 having 分组后的条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 1.查询男同学和女同学各自的数学平均分select sex,avg(math) from stu group by sex;-- 2.查询男同学和女同学各自的数学平均分，以及各自的人数select sex,avg(math),count(*) from stu group by sex;-- 3.查询男同学和女同学各自的数学平均分，以及人数，分数低于70不参与评分select sex,avg(math),count(*) from stu where math&gt;70 group by sex;-- 4.在3的基础上，人数要大于2select sex,avg(math),count(*) from stu where math&gt;70 group by sex having count(*)&gt;2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>where和having的区别：</p><ol><li>执行时机不同，where是分组之前限定，不满足where不参与分组，having是分组之后的过滤</li><li>可判断条件不同，where不能对聚合函数进行判断，having可以</li></ol><h4 id="5-分页查询"><a href="#5-分页查询" class="headerlink" title="5.分页查询"></a>5.分页查询</h4><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 列名 from 表名 limit 起始索引,查询条数;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>起始索引：开始的位置</p><p>计算公式：起始索引&#x3D;（当前页码-1）*每页条数</p><p>例如</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 每页显示三条数据，查询第2页数据select * from stu limit 3,3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>概念：限制加入表中的数据</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ol><li>非空：保证列中所有数据不能有null，not  null</li><li>唯一：保证列中所有数据各不相同，unique</li><li>主键：一行数据的唯一标识，非空且唯一，例如：ID，primary key</li><li>默认：保存数据时，未指定值就采用默认值，default</li><li>外键：让两个表建立连接，保证数据唯一，且完整，foreign key</li></ol><p>注意：默认约束只有不给值时才默认，如果给null结果是null而不是默认</p><p>例如</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table emp(id int PRIMARY KEY,-- 员工id，主键，且逐渐增加ename varchar(50) NOT NULL UNIQUE,-- 员工姓名，非空且唯一joindate date NOT NULL,-- 入职日期，非空salary double(7,2) NOT NULL,-- 工资，非空bonus double(7,2) DEFAULT 0-- 奖金，如果没有默认为0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h5><p>Nacicat  test21</p><h6 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h6><p>1.创建两个表之前，在子表添加外键</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 在子表内部写CONSTRAINT 外键名称 FOREIGN KEY(子表列名) REFERENCES 主表(主表列名);例如CONSTRAINT fk_emp_dept FOREIGN KEY(dep_id) REFERENCES dept(id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.创建表之后添加外键</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 子表名 add CONSTRAINT 外键名称 FOREIGN key(子表列名) REFERENCES 主表(主表列名);例如alter table emp add CONSTRAINT fk_emp_dept FOREIGN key(dep_id) REFERENCES dept(id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.删除外键</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 子表名 drop FOREIGN key 外键名称;例如alter table emp drop FOREIGN key fk_emp_dept;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><h4 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h4><p>一对一：用户和用户详情，用于表的拆分</p><p>一对多：部门和员工</p><p>多对多：商品和订单</p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>从多张表里面查数据</p><ol><li>连接查询：<ol><li>内连接：相当于查询A，B交集数据</li><li>外连接：<ol><li>左外连接：相当与查询A表所有数据和交集部分数据</li><li>右外连接：相当与查询B表所有数据和交集部分数据</li></ol></li></ol></li><li>子查询</li></ol><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061929697.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 隐式内连接select 列名 from 表1，表2… where 条件;例如select * from emp,dept where emp.dep_id&#x3D;dept.did;-- 显示内连接select 列名 from 表1 join 表2 on 条件; 例如select * from emp join dept on emp.dep_id&#x3D;dept.did;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061930886.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 左外连接-- 查询emp表所有数据和对应的员工信息select 列名 from 表1 left join 表2 on 条件;例如select * from emp left join dept on emp.dep_id&#x3D;dept.did;-- 右外连接-- 查询dept表所有数据和对应的员工信息select 列名 from 表1 right join 表2 on 条件;例如select * from emp right join dept on emp.dep_id&#x3D;dept.did;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>嵌套查询</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询财务部和市场部所有员工信息-- 单行单列：一个条件select 列名 from 表名 where 条件 ()&#x3D;(子查询);-- 例如select did from dept where dname&#x3D;&#39;财务部&#39;;select * from emp where dep_id&#x3D;(select did from dept where dname&#x3D;&#39;财务部&#39;);-- 多行单列，多个条件select 列名 from 表名 where 条件 ()in(子查询);-- 例如select did from dept where dname&#x3D;&#39;财务部&#39; or dname&#x3D;&#39;市场部&#39;;select * from emp where dep_id&#x3D;3 or dep_id&#x3D;2;-- 合并select * from emp where dep_id in(select did from dept where dname&#x3D;&#39;财务部&#39; or dname&#x3D;&#39;市场部&#39;);-- 多行多列,需要给子查询起别名,不然太长了select 列名 from (子查询) where 条件;-- 例如-- 查询入职日期是&#39;2011-11-11&#39;之后的员工信息和部门信息select * from emp where join_date&gt;&#39;2011-11-11&#39;;select * from emp,dept where emp.dep_id&#x3D;dept.did;-- 合并select * from (select * from emp where join_date&gt;&#39;2011-11-11&#39;)t1,dept where t1.dep_id&#x3D;dept.did;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 开启事务begin;-- 提交事务commit;-- 回滚事务rollback;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p><strong>21年10月的</strong></p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>test30</p><ol><li><p>导入驱动jar包</p></li><li><p>注册驱动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//可以省略不写了</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取连接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/db1"</span><span class="token punctuation">;</span><span class="token comment">//固定的</span><span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token comment">//你的用户名</span><span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"qpiu1230"</span><span class="token punctuation">;</span><span class="token comment">//你的密码</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义SQL语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update account set money=2000 where id=1;"</span><span class="token punctuation">;</span><span class="token comment">//“”就是在mysql中的操作语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取SQL对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//固定的</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行SQL</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> cnt<span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取返回值受影响的行数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>处理返回结果</p></li><li><p>释放资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h4><h5 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数</p><ol><li>url：<ol><li>语法：jdbc:mysql:&#x2F;&#x2F;IP地址:端口号&#x2F;数据库名称&#x2F;&#x2F;端口号默认3306</li><li>示例：jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db1</li><li>本机可简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;db1</li></ol></li><li>user：用户名</li><li>password：密码</li></ol><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>作用：</p><ol><li><p>获取SQL对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1.普通执行SQL</span><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.预编译SQL的对象：防止SQL注入</span><span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>管理事务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token comment">//开启事务</span>conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码块</span><span class="token comment">//提交事务</span>conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//回滚事务</span>conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h4><p>作用：执行SQL语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> cnt<span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回执行成功的行数</span><span class="token class-name">ResultSet</span> r<span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h5><p>test34</p><p>封装执行语句的查询结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ResultSet</span> r<span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取查询结果</span><span class="token keyword">boolean</span> b<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将光标往下移动一行</span><span class="token comment">//判断是否为有效行，true有效</span>xxx t<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">getxxx</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token comment">//获取数据</span>xxx：数据类型，比如<span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">getint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">String</span> s<span class="token operator">=</span>get <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数：1.列的编号，从1开始；2.列的名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用步骤</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取数据</span>r<span class="token punctuation">.</span><span class="token function">getxxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h4><p>test35</p><ol><li><p>获取PreparedStatement对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用？占位</span><span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select * from user where username= ? and password= ? "</span><span class="token punctuation">;</span>传入sql语句<span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置参数？的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给第一个？赋值</span>pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给第二个？赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>执行sql</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ResultSet</span> rs<span class="token operator">=</span>pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//并得到结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>test53</p><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>步骤</p><ol><li>创建user表，添加数据</li><li>创建模块，导入坐标</li><li>配置MyBatis文件</li><li>编写SQL映射文件</li><li>编码<ol><li>定义一个类</li><li>加载核心文件</li><li>获取SqlSession对象，执行SQL语句</li><li>释放资源</li></ol></li></ol><h3 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h3><p>test50</p><p>步骤：</p><ol><li>定义与SQL映射文件同名的接口，并放在同一目录下</li><li>设置SQL映射文件的namespace属性为Mapper接口全限定名</li><li>在接口中定义方法</li><li>编码<ol><li>通过SQL Session的getMapper方法获取接口对象</li><li>使用对应的方法完成执行</li></ol></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.加载mybatis配置文件，获取SqlSessionFactory</span><span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.获取SqlSession对象，执行sql</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上面的步骤都一样，固定格式</span><span class="token comment">//3.执行sql</span><span class="token comment">//List&lt;User> users = sqlSession.selectList("test.selectAll");</span><span class="token comment">//3.1获取UserMapper的代理对象</span><span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><p>test53</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java web</title>
      <link href="/2024/08/06/bi-ji/java-web/"/>
      <url>/2024/08/06/bi-ji/java-web/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>请求数据格式</p><ol><li>请求行：数据第一行。请求方式（GET，POST）&#x2F; 协议版本</li><li>请求头：第二行开始，格式为key：value形式</li><li>请求体：POST请求的最后一部分，存放请求参数</li></ol><p>注意：</p><ol><li>GET请求参数在请求行中，没有请求体，POST请求参数在请求体中</li><li>GET请求参数有大小限制，POST没有</li></ol><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>响应数据格式</p><ol><li>响应行：数据第一行。协议版本状态码（200，404）状态码描述（OK）</li><li>响应头：第二行开始，格式为key：value形式</li><li>响应体：存放响应数据</li></ol><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ol><li>1xx（信息性状态码）<ul><li><strong>类别说明</strong>：响应中——临时状态码</li><li><strong>详细描述</strong>：这些状态码表示请求已经接受，正在处理中。它们告诉客户端应该继续发送请求，或者如果请求已经完成，则可以忽略这些状态码。这些状态码是临时的，不会作为最终响应的一部分。</li></ul></li><li>2xx（成功状态码）<ul><li><strong>类别说明</strong>：成功——表示请求已经被成功接收，处理已完成</li><li><strong>详细描述</strong>：这个类别的状态码表明客户端的请求已经被服务器成功处理，并且服务器返回了预期的响应。</li></ul></li><li>3xx（重定向状态码）<ul><li><strong>类别说明</strong>：重定向——重定向到其它地方</li><li><strong>详细描述</strong>：这些状态码指示客户端需要发起一个新的请求来完成操作。服务器告诉客户端资源的实际位置，或者客户端需要采取的其他操作。</li></ul></li><li><strong>4xx</strong>（客户端错误状态码）<ul><li><strong>类别说明</strong>：客户端错误——处理发生错误，责任在客户端</li><li><strong>详细描述</strong>：这些状态码表示客户端的请求存在错误，如请求了一个不存在的资源、客户端未被授权、禁止访问等。错误的责任在客户端。</li></ul></li><li><strong>5xx</strong>（服务器错误状态码）<ul><li><strong>类别说明</strong>：服务器端错误——处理发生错误，责任在服务端</li><li><strong>详细描述</strong>：这些状态码表示服务器在处理请求时发生了错误，如服务端抛出异常、路由出错、HTTP版本不支持等。错误的责任在服务器端。</li></ul></li></ol><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a></p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h4><ol><li>定义一个类实现接口Filter</li><li>复写方法</li><li>注解设置url</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token comment">//写地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h5><p><strong>一个请求，多个资源</strong></p><p><strong>请求消息：客户端发给服务器的数据</strong></p><h6 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h6><p>test247</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span>．获取请求方式：<span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">2.</span>获取虚拟目录：<span class="token operator">/</span>day14<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3.</span>获取<span class="token class-name">Servlet</span>路径：<span class="token class-name">String</span> <span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4.</span>获取get方式请求参数：string <span class="token function">getQuerystring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">5.</span>获取请求<span class="token constant">URI</span>：<span class="token class-name">String</span> <span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>获取<span class="token constant">URL</span>： <span class="token class-name">StringBuffer</span> <span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6.</span> 获取协议及版本：<span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span>，<span class="token class-name">String</span> <span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，  <span class="token number">7.</span> 获取客户机的<span class="token constant">IP</span>地址：<span class="token class-name">String</span> <span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h6><p>test248</p><p>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过请求头的名称获取请求头的值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="获取请求体数据"><a href="#获取请求体数据" class="headerlink" title="获取请求体数据"></a>获取请求体数据</h6><p>test249</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取字符流</span><span class="token class-name">BufferedReader</span> br<span class="token operator">=</span>req<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>获取单个请求参数值<ul><li>方法：<code>String getParameter(String name)</code></li><li>描述：此方法根据参数名称（<code>name</code>）来获取对应的参数值。例如，如果URL或表单中包含<code>username=zs&amp;password=123</code>，则可以通过<code>getParameter(&quot;username&quot;)</code>来获取值<code>zs</code>。</li></ul></li><li>获取请求参数值的数组<ul><li>方法：<code>String[] getParameterValues(String name)</code></li><li>描述：当参数名称对应多个值时，可以使用此方法获取所有值的数组。例如，如果URL中包含<code>hobby=xx&amp;hobby=game</code>，则可以通过<code>getParameterValues(&quot;hobby&quot;)</code>来获取一个包含<code>xx</code>和<code>game</code>的字符串数组。</li></ul></li><li>获取所有请求的参数名称<ul><li>方法：<code>Enumeration&lt;String&gt; getParameterNames()</code></li><li>描述：此方法返回一个枚举（Enumeration），包含请求中所有参数的名称。这对于遍历所有请求参数非常有用。</li></ul></li><li>获取所有参数的Map集合<ul><li>方法：<code>Map&lt;String,String[]&gt; getParameterMap()</code></li><li>描述：此方法返回一个Map，其中包含了请求中所有的参数名称和它们对应的值（值可能是一个数组，因为单个参数名称可以对应多个值）。这个Map对于需要同时访问参数名称和值的场景非常有用。</li></ul></li></ol><h6 id="中文乱码问题："><a href="#中文乱码问题：" class="headerlink" title="中文乱码问题："></a><strong>中文乱码问题</strong>：</h6><ul><li><p><strong>解决</strong>：在获取参数前，设置request的编码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">res<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//post方法</span>request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个引号是获取的键的名字，get方法</span><span class="token class-name">String</span> username<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h6><p>请求转发：一种在服务器内部的资源跳转方式。其实现过程主要包含以下步骤和特点：</p><p><strong>步骤</strong>：</p><ol><li>通过request对象获取请求转发器对象。</li><li>使用获取到的<code>RequestDispatcher</code>对象来进行转发。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//“”写转发路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>特点</strong>：</p><ol><li>浏览器地址栏路径不发生变化。即使用户被转发到了另一个资源，浏览器的地址栏中仍然显示的是原始请求的URL。</li><li>只能转发到当前服务器内部资源中。请求转发是在服务器内部进行的，不能将请求转发到外部服务器上的资源。</li><li>转发是一次请求。在整个转发过程中，客户端（浏览器）只发起了一次请求，服务器内部通过请求转发器对象进行了资源的跳转和处理。</li></ol><p>获取servletContext：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServletContext</span> context <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p><strong>由服务器发送给客户端</strong></p><p>格式：</p><ol><li>响应行</li><li>响应头</li><li>响应空行</li><li>响应体</li></ol><h5 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h5><ul><li><strong>设置响应行</strong>：包括HTTP版本和状态码。格式如：”HTTP&#x2F;1.1 200 OK”</li><li><strong>设置状态码</strong>：通过<code>setStatus(int sc)</code>方法设置HTTP响应的状态码。</li><li><strong>设置响应头</strong>：通过<code>setHeader(String name, String value)</code>方法设置响应的头部信息。</li><li><strong>设置响应体</strong>：通过输出流将内容发送给客户端。</li></ul><h6 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h6><ol><li>获取输出流<ul><li><strong>字符输出流</strong>：使用<code>PrintWriter getWriter()</code>方法获取，适用于输出字符数据。</li><li><strong>字节输出流</strong>：使用<code>ServletOutputStream getOutputStream()</code>方法获取，适用于输出二进制数据。</li></ul></li><li><strong>使用输出流</strong>：根据需要选择合适的输出流，将数据写入，最终将数据输出到客户端浏览器。</li></ol><h6 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h6><p>test267</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">res<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/tomcat-demo1/test267Demo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//动态获取虚拟目录</span><span class="token class-name">String</span> contextPath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h6><p>test271</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">res<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//post方法</span>request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个引号是获取的键的名字，get方法</span><span class="token class-name">String</span> username<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h5><p><strong>获取ServletContext对象的方式</strong></p><ul><li><p>通过request对象获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>通过HttpServlet获取</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><p><strong>共享数据</strong></p><h4 id="1-会话"><a href="#1-会话" class="headerlink" title="1. 会话"></a>1. 会话</h4><ul><li><strong>定义</strong>：一次会话中包含了多次请求和响应的交互过程。</li><li><strong>过程</strong>：从浏览器第一次给服务器资源发送请求开始，会话即被建立，直到会话中的任一方（浏览器或服务器）断开连接为止。</li></ul><h4 id="2-功能"><a href="#2-功能" class="headerlink" title="2. 功能"></a>2. 功能</h4><ul><li><strong>数据共享</strong>：在一次会话的范围内，多次请求之间可以共享数据。这意味着，在会话建立之后，用户与服务器之间的多次请求和响应中，可以传递和保持一些数据，以便在不同请求之间共享信息。</li></ul><h4 id="3-实现方式"><a href="#3-实现方式" class="headerlink" title="3. 实现方式"></a>3. 实现方式</h4><p><strong>客户端会话技术：</strong></p><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p><strong>将数据保存在客户端</strong></p><p>如果要存储中文，需要转码</p><p>test286</p><p>创建cookie对象，绑定数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发送cookie对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取cookie，拿到数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="存储时间"><a href="#存储时间" class="headerlink" title="存储时间"></a>存储时间</h6><p>默认浏览器关闭后，cookie自动销毁</p><p>持久化存储：setMaxAge(int seconds)设置时间</p><h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><ol><li>一般存储少量，不敏感的信息</li><li>在不登陆的情况下，完成服务器对客户的身份识别</li></ol><p><strong>服务器端会话技术：</strong></p><h5 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h5><p>test300</p><p>一次会话，多次请求</p><p><strong>将数据保存在服务器端</strong></p><ol><li><p><strong>获取HttpSession对象</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>使用HttpSession对象访问属性</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>设置HttpSession对象的属性</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>删除HttpSession对象的属性</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>cookie</p><h6 id="存活时间"><a href="#存活时间" class="headerlink" title="存活时间"></a>存活时间</h6><p>客户端关闭后session就不一样了</p><p>可设置cookie修改存活时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cookie</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ol><li>用于存储一次会话的多次请求的数据，存在于服务器端</li><li>可存储任意类型，任意大小的数据</li></ol><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>&lt;%   代码   %&gt;</p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><ol><li><strong>pageContext</strong></li><li><strong>request</strong></li><li><strong>session</strong></li><li><strong>application</strong></li><li><strong>response</strong></li><li><strong>page</strong></li><li><strong>out</strong></li><li><strong>config</strong></li><li><strong>exception</strong></li></ol><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ol><li><p>M:Model，模型。JavaBean完成具体的业务操作，如：查询数据库，封装对象</p></li><li><p>V:View，视图。JSP展示数据</p></li><li><p>C:Controller，控制器。Servlet</p><p>获取用户的输入,调用模型,将数据交给视图进行展示</p></li></ol><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ol><li>耦合性低，方便维护，可以利于分工协作</li><li>重用性高</li></ol><p>缺点：使得项目架构变得复杂，对开发人员要求高</p><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><h4 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h4><p>${域名称.键名}：用于从指定域中获取指定键的值。</p><p><strong>域名称</strong>：</p><ul><li><code>pageScope</code> -&gt; <code>pageContext</code></li><li><code>requestScope</code> -&gt; <code>request</code></li><li><code>sessionScope</code> -&gt; <code>session</code></li><li><code>applicationScope</code> -&gt; <code>application</code> (ServletContext)</li></ul><p><strong>举例</strong>：</p><ul><li>假设在<code>request</code>域中存储了一个键值对，键为<code>name</code>，值为<code>张三</code>。</li><li>使用EL表达式获取这个值的方式是：<code>$&#123;requestScope.name&#125;</code>。这将输出存储在request域中，键为<code>name</code>的值，即<code>张三</code>。</li></ul><h4 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h4><p>List集合，Map集合的值</p><p>1.对象：${域名称.键名.属性名}</p><p>2.List集合：${域名称.键名[索引]},</p><p>3.Map集合：${域名称.键名.key名称}</p><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061941102.png"></p><h2 id="P329-P354"><a href="#P329-P354" class="headerlink" title="P329-P354"></a>P329-P354</h2><p>一个项目</p><p>没做</p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>test357</p><p>过滤器</p><ol><li>概念<ul><li>web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</li></ul></li><li>作用<ul><li>一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤等。</li></ul></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>定义一个类实现接口Filter</li><li>复写方法</li><li>配置拦截路径，注解</li></ol><h4 id="过滤器配置"><a href="#过滤器配置" class="headerlink" title="过滤器配置"></a>过滤器配置</h4><h4 id="拦截路径配置"><a href="#拦截路径配置" class="headerlink" title="拦截路径配置"></a>拦截路径配置</h4><p>test361</p><ol><li>具体资源路径：&#x2F;index.jsp<ul><li>只有当访问index.jsp资源时，过滤器才会被执行。</li></ul></li><li>拦截目录：&#x2F;user&#x2F;*<ul><li>当访问&#x2F;user目录下的所有资源时，过滤器都会被执行。</li></ul></li><li>后缀名拦截：*.jsp<ul><li>当访问所有后缀名为.jsp的资源时，过滤器都会被执行。</li></ul></li><li>拦截所有资源：&#x2F;*<ul><li>当访问应用中的所有资源时，过滤器都会被执行。</li></ul></li></ol><h5 id="拦截方式配置"><a href="#拦截方式配置" class="headerlink" title="拦截方式配置"></a>拦截方式配置</h5><ul><li>设置dispatcherTypes属性：<ol><li>REQUEST：默认值。表示过滤器会拦截浏览器直接发起的资源请求。</li><li>FORWARD：表示过滤器会拦截通过转发（forward）方式访问的资源请求。</li></ol></li></ul><h5 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a><strong>过滤器链</strong></h5><p><strong>（配置多个过滤器）</strong></p><p>在执行过程中，如果配置了两个过滤器，例如过滤器1和过滤器2，它们的执行顺序需要被明确指定。通常，过滤器链的执行顺序是依照配置中声明的顺序来执行的。</p><p><strong>执行顺序</strong>：</p><ul><li>首先，执行<strong>过滤器1</strong>。</li><li>接着，执行<strong>过滤器2</strong>。</li><li>然后，进行<strong>资源执行</strong>。</li></ul><p><strong>过滤器先后顺序问题</strong>：</p><ul><li><strong>注解配置</strong>：字符串值较小的类名对应的过滤器会先执行。例如，如果有两个过滤器类名为<code>AFilter</code>和<code>BFilter</code>，由于<code>A</code>在字典序上小于<code>B</code>，因此<code>AFilter</code>会先于<code>BFilter</code>执行。</li></ul><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><p>P366</p><h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h3><p>test373</p><p>通过jQuery方式来获取名称叫’div’的所有html元素对象<br>var $divs &#x3D; $(“div”);  </p><h3 id="JQ与JS相互转换"><a href="#JQ与JS相互转换" class="headerlink" title="JQ与JS相互转换"></a>JQ与JS相互转换</h3><p>jq –&gt; js ：jq对象[索引l],或者jq对象.get（索引l）</p><p>js –&gt; jq：$(js对象)</p><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//入口函数</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1. 基本选择器"></a>1. 基本选择器</h4><ul><li>\1. 标签选择器（元素选择器）<ul><li><em>语法：</em><code>$(&quot;html标签名&quot;)</code></li></ul></li><li>\2. id选择器<ul><li><em>语法：</em><code>$(&quot;#id的属性值&quot;)</code></li></ul></li><li>\3. 类选择器<ul><li><em>语法：</em><code>$(&quot;.class的属性值&quot;)</code></li></ul></li><li>\4. 并集选择器<ul><li><em>语法：</em><code>$(&quot;选择器1，选择器2，...&quot;)</code></li><li><em>描述：</em> 获取多个选择器选中的所有元素。这是一种同时选择多个元素的快捷方式。</li></ul></li></ul><h4 id="2-层级选择器"><a href="#2-层级选择器" class="headerlink" title="2. 层级选择器"></a>2. 层级选择器</h4><ul><li>\1. 后代选择器<ul><li><em>语法：</em><code>$(&quot;A B&quot;)</code></li><li><em>描述：</em> 选择A元素内部的所有B元素，不论它们之间隔了多少层嵌套。</li></ul></li><li>\2. 子选择器<ul><li><em>语法：</em><code>$(&quot;A&gt;B&quot;)</code></li><li><em>描述：</em> 选择A元素内部的直接子元素B，只选择一层嵌套关系。</li></ul></li></ul><h4 id="3-属性选择器"><a href="#3-属性选择器" class="headerlink" title="3. 属性选择器"></a>3. 属性选择器</h4><ul><li><p>\1. 属性名称选择器</p><ul><li><em>语法：</em><code>$(&quot;A[属性名]&quot;)</code></li><li><em>描述：</em> 选择包含指定属性的元素。</li></ul></li><li><p>\2. 属性值选择器</p><ul><li><em>语法：</em><code>$(&quot;A[属性名=&#39;值&#39;]&quot;)</code></li><li><em>描述：</em> 选择包含指定属性且该属性值等于指定值的元素。</li></ul></li><li><p>\3. 复合属性选择器</p><ul><li><p><em>语法：</em><code>$(&quot;A[属性名=&#39;值&#39;][...]&quot;)</code></p></li><li><p><em>描述：</em> 选择包含多个属性条件的元素，这些条件必须同时满足。</p></li></ul></li></ul><h4 id="4-过滤选择器"><a href="#4-过滤选择器" class="headerlink" title="4.过滤选择器"></a>4.过滤选择器</h4><ol><li>首元素选择器<ul><li>语法：<code>:first</code></li><li>描述：选择一组元素中的第一个元素。</li></ul></li><li>尾元素选择器<ul><li>语法：<code>:last</code></li><li>描述：选择一组元素中的最后一个元素。</li></ul></li><li>非元素选择器<ul><li>语法：<code>:not(selector)</code></li><li>描述：选择除了指定选择器匹配元素之外的所有元素。</li></ul></li><li>偶数选择器<ul><li>语法：<code>:even</code></li><li>描述：选择一组元素中的偶数元素（通常从1开始计数，具体取决于浏览器的实现）。</li></ul></li><li>奇数选择器<ul><li>语法：<code>:odd</code></li><li>描述：选择一组元素中的奇数元素（通常从0或1开始计数，具体取决于浏览器的实现）。</li></ul></li><li>等于索引选择器<ul><li>语法：<code>:eq(index)</code></li><li>描述：选择一组元素中索引等于指定值的元素。索引从0开始。</li></ul></li><li>大于索引选择器<ul><li>语法：<code>:gt(index)</code></li><li>描述：选择一组元素中索引大于指定值的元素。索引从0开始。</li></ul></li><li>小于索引选择器<ul><li>语法：<code>:lt(index)</code></li><li>描述：选择一组元素中索引小于指定值的元素。索引从0开始。</li></ul></li><li>标题选择器<ul><li>语法：<code>:header</code></li><li>描述：选择所有标题元素（如<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>）。</li></ul></li></ol><h4 id="5-表单过滤选择器"><a href="#5-表单过滤选择器" class="headerlink" title="5.表单过滤选择器"></a>5.表单过滤选择器</h4><ol><li><p>可用元素选择器：用于获取当前表单中可用的元素。</p><p><strong>语法</strong>：<code>:enabled</code> —— 获得可用元素。</p></li><li><p>不可用元素选择器</p><ul><li>用途：用于获取当前表单中不可用的元素。</li><li><strong>语法</strong>：<code>:disabled</code> —— 获得不可用元素。</li></ul></li><li><p>选中选择器</p><p>（适用于单选&#x2F;复选框）：</p><ul><li>用途：用于获取当前表单或复选框中被选中的元素。</li><li><strong>语法</strong>：<code>:checked</code> —— 获得单选&#x2F;复选框选中的元素。</li></ul></li><li><p>选中选择器</p></li></ol><p>​（适用于下拉框）：</p><ul><li>用途：用于获取当前表单或下拉框中被选中的元素。</li><li><strong>语法</strong>：<code>:selected</code> —— 获得下拉框选中的元素。</li></ul><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="内容操作"><a href="#内容操作" class="headerlink" title="内容操作"></a>内容操作</h4><p>test381</p><ol><li>html()<ul><li>功能：用于获取或设置元素的标签体内容。</li><li>示例：若元素为<code>&lt;a&gt;&lt;font&gt;内容&lt;/font&gt;&lt;/a&gt;</code>，使用<code>html()</code>方法后，将获取或设置其内容为<code>&lt;font&gt;内容&lt;/font&gt;</code>。</li></ul></li><li>text()<ul><li>功能：用于获取或设置元素的标签体纯文本内容。</li><li>示例：若元素为<code>&lt;a&gt;&lt;font&gt;内容&lt;/font&gt;&lt;/a&gt;</code>，使用<code>text()</code>方法后，将获取或设置其内容为“内容”。</li></ul></li><li>val()<ul><li>功能：用于获取或设置表单元素（如input、select等）的value属性值。</li></ul></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myinput<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mydiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 获取id为"myinput"的HTML元素的值，并将其赋给变量"value"</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myinput"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//张三</span>        <span class="token comment">// 修改id为"myinput"的HTML元素的值，设置为字符串"李四"</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myinput"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取id为"mydiv"的HTML元素的标签体内容，并将其赋给变量"html"</span>        <span class="token comment">//&lt;p>&lt;a href="#">标题标签&lt;/a>&lt;/p></span>        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改id为"mydiv"的HTML元素的标签体内容，设置为"&lt;p>aaaa&lt;/p>"</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"&lt;p>aaaa&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取id为"mydiv"的HTML元素的文本内容，并将其赋给变量"text"</span>        <span class="token comment">//标题标签</span>        <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改id为"mydiv"的HTML元素的文本内容，设置为"bbb"</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h4><h5 id="通用属性操作"><a href="#通用属性操作" class="headerlink" title="通用属性操作"></a>通用属性操作</h5><p>test382</p><ol><li>attr()<ul><li>功能：用于获取或设置元素的属性。</li></ul></li><li>removeAttr()<ul><li>功能：用于删除元素的指定属性。</li></ul></li><li>prop()<ul><li>功能：用于获取或设置元素的属性（与<code>attr()</code>相似，但主要用于处理布尔属性或返回属性值的true&#x2F;false）。</li></ul></li><li>removeProp()</li></ol><p><strong><code>attr</code>和<code>prop</code>方法的使用场景有所区别。</strong></p><p><code>prop</code>方法更适用于操作元素的固有属性，而<code>attr</code>方法则更适用于操作元素的自定义属性。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bj<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beijing<span class="token punctuation">"</span></span> <span class="token attr-name">xxx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tj<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tianjin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>天津<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取ID为"bj"的HTML元素的name属性值</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#bj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将ID为"bj"的元素的name属性值设置为"dabeijing"</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#bj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"dabeijing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 新增ID为"bj"的元素的description属性</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#bj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">,</span> <span class="token string">"didu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除ID为"bj"的元素的name属性</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#bj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 尝试获取ID为"hobby"的元素的checked属性</span>    <span class="token keyword">var</span> checked <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hobby"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 显示checked属性的值</span>    <span class="token function">alert</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="对class属性的操作"><a href="#对class属性的操作" class="headerlink" title="对class属性的操作"></a>对class属性的操作</h5><ol><li>addClass()<ul><li>功能：用于给元素添加一个或多个class属性值。</li></ul></li><li>removeClass()<ul><li>功能：用于从元素中删除一个或多个class属性值。</li></ul></li><li>toggleClass()<ul><li>功能：用于切换（如果元素已经有该class则删除，如果没有则添加）元素的class属性值。</li></ul></li></ol><h5 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h5><p>test384+385</p><ol><li><p>**append()**：该方法用于将子元素追加到父元素的末尾。具体实现为，对象1.append(对象2)，表示将对象2添加到对象1元素内部，并且在末尾。</p></li><li><p>**prepend()**：与append()相反，prepend()方法用于将子元素追加到父元素的开头。对象1.prepend(对象2)表示将对象2添加到对象1元素内部，并且在开头。</p></li><li><p>**appendTo()**：此方法与append()作用相似，但方向相反。对象1.appendTo(对象2)表示将对象1添加到对象2内部，并且在末尾。</p></li><li><p>**prependTo()**：与prepend()方法类似，但操作方向相反。对象1.prependTo(对象2)表示将对象1添加到对象2内部，并且在开头。</p></li><li><p>**after()**：此方法用于添加元素到目标元素的后边。对象1.after(对象2)表示将对象2添加到对象1的后边。在这种情况下，对象1和对象2是兄弟关系。</p></li><li><p>**before()**：与after()相反，before()方法用于添加元素到目标元素的前边。对象1.before(对象2)表示将对象2添加到对象1的前边。同样地，对象1和对象2是兄弟关系。</p></li><li><p>**insertAfter()**：此方法将对象添加到另一个对象的后边。对象1.insertAfter(对象2)表示将对象1添加到对象2的后边。此时，对象1和对象2也是兄弟关系。</p></li><li><p>**insertBefore()**：与insertAfter()相反，insertBefore()方法将对象添加到另一个对象的前边。对象1.insertBefore(对象2)表示将对象1添加到对象2的前边。在这里，对象1和对象2同样是兄弟关系。</p></li></ol><p>​9.**remove() **</p><ul><li>功能描述：移除元素。</li><li>使用方式：*对象.remove()*：将对象删除掉。这里的“对象”指的是某个容器（如列表、集合等）中的特定元素。通过调用该元素所在容器的 <code>remove()</code> 方法，并传入要删除的元素作为参数（尽管在描述中未明确提及参数，但通常是这样），可以实现删除操作。</li></ul><p>​10.<strong>empty()</strong> </p><ul><li>功能描述：清空元素的所有后代元素。</li><li>使用方式：*对象.empty()*：将对象的后代元素全部清空，但是保留当前对象以及其属性节点。这里的“对象”可能指的是如HTML DOM中的元素，通过调用该元素的 <code>empty()</code> 方法，可以移除其内部的所有子元素和文本内容，但保留该元素本身及其属性。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 绑定点击事件到ID为"b1"的按钮</span>    $<span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用appendTo方法将ID为"fk"的元素添加到ID为"city"的元素内部的最前面</span>        $<span class="token punctuation">(</span><span class="token string">"#fk"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token string">"#city"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建并绑定点击事件到ID为"b2"的按钮</span>    <span class="token comment">// $("&lt;input type='button' value='将反恐放置到city的最前面' id='b2'/>").appendTo(document.body);</span>    $<span class="token punctuation">(</span><span class="token string">"#b2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用prependTo方法将ID为"fk"的元素添加到ID为"city"的元素内部的最前面</span>        $<span class="token punctuation">(</span><span class="token string">"#fk"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token string">"#city"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建并绑定点击事件到ID为"b3"的按钮</span>    <span class="token comment">// $("&lt;input type='button' value='将反恐插入到天津后面' id='b3'/>").appendTo(document.body);</span>    $<span class="token punctuation">(</span><span class="token string">"#b3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用insertAfter方法将ID为"fk"的元素插入到ID为"tj"的元素后面</span>        $<span class="token punctuation">(</span><span class="token string">"#fk"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token string">"#tj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建并绑定点击事件到ID为"b4"的按钮</span>    <span class="token comment">// $("&lt;input type='button' value='将反恐插入到天津前面' id='b4'/>").appendTo(document.body);</span>    $<span class="token punctuation">(</span><span class="token string">"#b4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用insertBefore方法将ID为"fk"的元素插入到ID为"tj"的元素前面</span>        $<span class="token punctuation">(</span><span class="token string">"#fk"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token string">"#tj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h4 id="显示和隐藏元素"><a href="#显示和隐藏元素" class="headerlink" title="显示和隐藏元素"></a>显示和隐藏元素</h4><p>test391</p><h5 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h5><p><strong>显示</strong></p><ul><li>方法：<code>show([speed,[easing],[fn]])</code></li><li>参数说明：<ul><li><code>speed</code>：动画的速度。这个参数可以是三个预定义的值之一（”slow”、”normal”、”fast”），或者是表示动画时长（以毫秒为单位）的数值（如：1000）。</li><li><code>easing</code>：用来指定动画效果的参数。默认值是”swing”，它使动画执行时效果先慢，然后中间变快，最后又慢下来。另一个可选项是”linear”，它使动画执行时速度是匀速的。</li><li><code>fn</code>：这是一个可选的回调函数，当动画完成时会被执行。该函数针对每个元素只执行一次。</li></ul></li></ul><p><strong>隐藏和切换</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 隐藏div</span>function <span class="token function">hideFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">(</span><span class="token string">"#showDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span><span class="token string">"swing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 显示div</span>function <span class="token function">showFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">(</span><span class="token string">"#showDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span><span class="token string">"swing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 切换</span>function <span class="token function">toggleFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">(</span><span class="token string">"#showDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h5><p>test392</p><h5 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 隐藏div</span>function <span class="token function">hideFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 滑动</span>    <span class="token comment">// $("#showDiv").slideUp("slow");</span>    <span class="token comment">// 淡入淡出</span>    $<span class="token punctuation">(</span><span class="token string">"#showDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 显示div</span>function <span class="token function">showFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// $("#showDiv").slideDown("slow");</span>    $<span class="token punctuation">(</span><span class="token string">"#showDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 切换</span>function <span class="token function">toggleFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// $("#showDiv").slideToggle("slow");</span>    $<span class="token punctuation">(</span><span class="token string">"#showDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>test393</p><h4 id="JS的for循环遍历"><a href="#JS的for循环遍历" class="headerlink" title="JS的for循环遍历"></a>JS的for循环遍历</h4><p>使用<code>for</code>关键字进行遍历，其基本语法为：<code>for(初始化值; 循环结束条件; 步长)</code>。</p><h4 id="jq的each方法遍历"><a href="#jq的each方法遍历" class="headerlink" title="jq的each方法遍历"></a>jq的each方法遍历</h4><ul><li>jQuery的遍历集合元素的方法，即<code>.each(callback)</code>。</li><li><code>.each</code>可以接收两个参数：<code>index</code>和<code>element</code>。</li><li><code>index</code>参数表示当前元素在集合中的索引位置。</li><li><code>element</code>参数表示当前正在遍历的元素对象本身。</li><li><code>.each</code>方法的语法为：<code>jquery对象.each(function(index, element) &#123;&#125;);</code>。</li></ul><h3 id="事件绑定-1"><a href="#事件绑定-1" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul><li><p><strong>1.jQuery标准的绑定方式</strong>：<code>jq对象.事件方法（回调函数）</code>。</p><p>test396</p></li></ul><p><strong>2.on绑定事件&#x2F;off解除绑定</strong></p><ul><li><strong>on绑定事件</strong>：具体语法为<code>jq对象.on(&quot;事件名称&quot;，回调函数)</code>。</li><li><strong>off解除绑定</strong>：具体语法为<code>jq对象.off(&quot;事件名称&quot;)</code>。</li></ul><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>JQ实现</p><p>test407</p><p><strong>1.ajax()</strong></p><p><strong>2.$.get()</strong></p><p>发送<em>g<strong>e</strong>t</em>请求语法:.get(url，[data]，[callback]，[type]),*参数</p><p>url：请求路径</p><p>data：请求参数</p><p>callback：回调函数</p><p>type：响应结果的类型</p><p><strong>3.$.post（）</strong></p><p>发送post请求,和get一模一样</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h4 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h4><p>test411</p><p>​    数据在名称&#x2F;值对中：json数据是由键值对构成的</p><p>   数据由逗号分隔：多个键值对由逗号分隔<br>   花括号保存对象：使用定义json格式<br>   方括号保存数组：[  ]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 定义基本格式</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 2. 嵌套格式</span><span class="token keyword">var</span> persons <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> ps<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><h6 id="获取数组中的值"><a href="#获取数组中的值" class="headerlink" title="获取数组中的值"></a>获取数组中的值</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key in person<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="java转jason"><a href="#java转jason" class="headerlink" title="java转jason"></a>java转jason</h4><p>test413</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建核心对象Mapper</span><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转化成字符串</span><span class="token class-name">String</span> s <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="字符串类型（String）"><a href="#字符串类型（String）" class="headerlink" title="字符串类型（String）"></a>字符串类型（String）</h4><p><strong>1. 存储（Set）</strong></p><p><strong>2. 获取（Get）</strong></p><p><strong>3. 删除（Del）</strong></p><h4 id="哈希类型（Hash）"><a href="#哈希类型（Hash）" class="headerlink" title="哈希类型（Hash）"></a>哈希类型（Hash）</h4><p>哈希类型存储的是键值对集合，一个键可以对应多个字段（field）及其值（value）。</p><p><strong>1. 存储（HSet）</strong></p><p><strong>2. 获取（HGet&#x2F;HGetAll）</strong></p><p><strong>3. 删除（HDel）</strong></p><h4 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h4><h5 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h5><ul><li><strong>向列表左侧添加元素（lpush）</strong></li><li><strong>向列表右侧添加元素（rpush）</strong></li></ul><h5 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h5><ul><li><strong>范围获取（lrange）</strong></li></ul><h5 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h5><ul><li><strong>删除并返回列表最左边的元素（lpop）</strong></li><li><strong>删除并返回列表最右边的元素（rpop）</strong></li></ul><h4 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h4><ul><li><strong>不允许重复元素</strong>：</li><li><strong>存储</strong>：</li><li><strong>获取</strong>：</li><li><strong>删除</strong>：</li></ul><h4 id="有序集合（sortedset）"><a href="#有序集合（sortedset）" class="headerlink" title="有序集合（sortedset）"></a>有序集合（sortedset）</h4><ul><li><strong>不允许重复元素，且元素有顺序</strong></li><li><strong>存储</strong></li><li><strong>获取</strong></li><li><strong>删除</strong></li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ol><li>**keys  ***：查询字典中所有的键。</li><li><strong>type  key</strong>：获取键对应的value类型</li><li><strong>del key</strong>：删除指定的键和值</li></ol><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><p>test428test1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取连接</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s<span class="token operator">=</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//setex可以指定删除时间</span>jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println(s);</span><span class="token comment">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="hash（map）"><a href="#hash（map）" class="headerlink" title="hash（map）"></a>hash（map）</h5><p>test428test2</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取连接</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"gender"</span><span class="token punctuation">,</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println(s);</span><span class="token comment">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p>test428test3</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取连接</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作</span>jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"myliist"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"myliist"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"myliist"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出</span><span class="token class-name">String</span> ele1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lpop</span><span class="token punctuation">(</span><span class="token string">"myliist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> ele2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"myliist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ele1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ele2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"myliist"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"myliist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>没有重复元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取连接</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"C++"</span><span class="token punctuation">,</span><span class="token string">"pyhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="sortedset"><a href="#sortedset" class="headerlink" title="sortedset"></a>sortedset</h5><p>可排序，无重复元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取连接</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrange</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接池对象</span><span class="token class-name">JedisPool</span> jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取连接</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2024/08/06/bi-ji/java-ji-chu/"/>
      <url>/2024/08/06/bi-ji/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><p>模板–包–类–方法</p><p>面向对象三大特征：封装–继承–多态</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> sc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token class-name">Random</span> r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0-99</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token comment">//基本类型变量</span><span class="token class-name">Student</span><span class="token comment">//引用类型变量</span><span class="token class-name">Student</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//创建对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-封装（private，this）"><a href="#1-封装（private，this）" class="headerlink" title="1.封装（private，this）"></a>1.封装（private，this）</h2><p>p111</p><p>提高安全性</p><p>一般配套set,get</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token comment">//this指成员变量（全局变量）</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-String，StringBuilder"><a href="#2-String，StringBuilder" class="headerlink" title="2.String，StringBuilder"></a>2.String，StringBuilder</h2><p>p127</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//String不可改变</span><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>s<span class="token operator">+=</span><span class="token string">"aaa"</span><span class="token punctuation">;</span><span class="token comment">//都是合理的</span><span class="token comment">//String 常用函数</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断两个字符串内容是否相等</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问第i个元素</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以空格为界分割（可以改）</span><span class="token class-name">StringBuilder</span> sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转化成StringBuilder</span><span class="token comment">//StringBuilder常用函数：</span>    <span class="token class-name">StringBuilder</span> sb；sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回长度</span>sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//翻转</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转化成String</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ArrayList"><a href="#3-ArrayList" class="headerlink" title="3.ArrayList"></a>3.ArrayList<E></h2><p>p134</p><p>例如ArrayList<String></p><p>优点：容量可变。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加元素</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在指定位置加元素，注意：不能越界访问</span><span class="token keyword">int</span> length<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求长度</span>s<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除指定元素</span>s<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除指定位置元素</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问第i个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-继承（extends，super）"><a href="#4-继承（extends，super）" class="headerlink" title="4.继承（extends，super）"></a>4.继承（extends，super）</h2><p>p150</p><p>格式：public class 子类名 extends 父类名（）</p><p>例如：public class Zi extends Fu()</p><p>特点：子类有父类的内容，父类无子类内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问局部变量age</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问成员变量age（全局变量）（本类的成员变量）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问父类的成员变量</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子类构造方法"><a href="#子类构造方法" class="headerlink" title="子类构造方法"></a>子类构造方法</h3><p>子类中所有的构造方法默认都会访问父类中无参的构造方法</p><ol><li>因为子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化。</li><li>每一个子类构造方法的第一条语句默认  super（）；</li><li>如果父类没有无参构造，推荐手动给每一个类添加一个无参构造方法；</li></ol><p>解释如下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fu中无参被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zi</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zi中无参被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zi中有参被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agre<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Zi</span> z<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出：fu中无参被调用，zi中无参被调用</span>    <span class="token class-name">Zi</span> z2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出：fu中无参被调用，zi中有参被调用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-import导包"><a href="#5-import导包" class="headerlink" title="5.import导包"></a>5.import导包</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">Teacher</span></span><span class="token punctuation">;</span><span class="token comment">//自己建立的包com里面的Teacher类(类好像加不加无所谓？)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-final"><a href="#6-final" class="headerlink" title="6.final"></a>6.final</h2><p>p165</p><p>特点：</p><ol><li>修饰”方法“：表明该方法是最终方法，不能被重写</li><li>修饰变量：表面该变量是“常量”，不能再次被赋值</li><li>修饰“类”：表明该类是最终类，不能被继承（子extends父）</li></ol><p>final修饰局部变量</p><ol><li>变量是基本类型：final修饰的是基本类型的数据值不能改变</li><li>变量是引用类型：final修饰的是引用类型的地址值不能改变，但地址值可以变</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//基本类型</span><span class="token keyword">final</span> <span class="token class-name">Student</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引用类型</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span><span class="token punctuation">&#123;</span><span class="token comment">//类</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-多态"><a href="#7-多态" class="headerlink" title="7.多态"></a>7.多态</h2><p>P170</p><h3 id="子类重写"><a href="#子类重写" class="headerlink" title="子类重写"></a>子类重写</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父类指向子类</span><span class="token comment">//编译看左边（父类有无该变量【方法】），运行看右边（子类是否重写）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println(a.weight);//编译错误，Animal中没有weight成员变量</span>a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出Cat重写之后的结果</span><span class="token comment">//a.playgame();//编译错误，Animal中没有playgame“方法”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一对多函数"><a href="#一对多函数" class="headerlink" title="一对多函数"></a>一对多函数</h3><p>好处：当父类引用变量做形参，子类引用变量做实参时，可以只使用一个方法（嵌套另一个方法）实现一对多的目的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useAnimal</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//一对多函数</span>    a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//a.lookdoor();//编译错误，虽然Dog类里面有此方法，但是父类里面没此方法</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">//分函数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗吃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lookdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗看门"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">//分函数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫抓老鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Animal</span> ao<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Cat</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ao<span class="token punctuation">.</span><span class="token function">useAnimal</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出猫抓老鼠</span>    <span class="token class-name">Dog</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ao<span class="token punctuation">.</span><span class="token function">useAnimal</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出狗吃骨头</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h3><ol><li>向上转型：Animal a&#x3D;new Cat（）；从子到父</li><li>向下转型：Cat c&#x3D;（Cat）a；可以使用子类里面独有的方法</li></ol><h2 id="8-抽象类"><a href="#8-抽象类" class="headerlink" title="8.抽象类"></a>8.抽象类</h2><p>p175</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>现实中一些抽象的事物不能具体化，采用抽象类</p><p>抽象类和抽象方法必须用abstract关键字修饰</p><p>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</p><p>抽象类的子类</p><ol><li>重写所有抽象方法</li><li>子类也是抽象类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抽象方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用处：子类访问父类数据（方法）时的作用</p><h2 id="9-接口"><a href="#9-接口" class="headerlink" title="9.接口"></a>9.接口</h2><p>p179</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li><p>接口用关键字interface修饰</p></li><li><p>类  实现  接口  用implements表示</p></li><li><pre><code class="java">public interface Jumpping&#123;//定义一个接口    public abstract void jump();//抽象方法&#125;public class Cat implements(实现) Jumpping&#123;    &#125;<pre class="line-numbers language-none"><code class="language-none">   4. 接口里面的变量都是常量5. 接口里面不能有非抽象方法，接口没有构造方法#### 多态##### 一般父&#x3D;new 子，接口&#x3D;new 实现类1. 形式：抽象类多态，接口多态2. 前提：有继承（抽象类多态）或者实现（接口多态）关系   ​有方法重写   ​有父（类&#x2F;接口）引用指向（子&#x2F;实现）类对象extends（继承）implements（实现）### 类和接口的关系1. 类和类的关系：继承（extends）关系，只能单继承，但可以多层继承2. &#96;&#96;&#96;java   public class Zi extends Fu&#123;&#125;   public class Fu extends GrandFu&#123;&#125;&#x2F;&#x2F;多层继承<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>类和接口：实现（implements）关系，可以单实现也可以多实现，可以在继承类的同时实现多个接口</p></li><li><pre><code class="java">public class Zi extends Fu implements jie1,jie2,jie3&#123;&#125;//Zi继承Fu类，然后实现接口1，接口2，接口3<pre class="line-numbers language-none"><code class="language-none">   5. 接口与接口：继承（extends）关系，可以单继承，也可以多继承#### 抽象类与接口的区别抽象类是对事物（门）的抽象（仍是那类事物共有的特性）接口是对行为（报警）的抽象（额外的，特有的）例如：门具有开和关的功能，采用抽象类，但加了个报警功能，则用接口来实现![](https:&#x2F;&#x2F;jsd.onmicrosoft.cn&#x2F;gh&#x2F;zhouzhou1o&#x2F;tuchuang@main&#x2F;img&#x2F;202408061932981.png)test186## 10.内部类### 匿名内部类本质：是一个继承了该类或者实现了该接口的子类匿名对象&#96;&#96;&#96;java new Inter()&#123;&#x2F;&#x2F;接口名    &#x2F;&#x2F;重写    public void show()&#123;        System.out.println(&quot;000&quot;);    &#125;&#125;;&#x2F;&#x2F;实现了该接口的“对象”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">jo<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Jumpping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗可以跳高了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略添加类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test193</p><h2 id="11-常用函数"><a href="#11-常用函数" class="headerlink" title="11.常用函数"></a>11.常用函数</h2><p>p194</p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传小数，返回大于等于的整数（的小数形式）如：13.00</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回小于等于的整数（的小数形式）如12.00</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传小数，返回小数</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回[0.0-1.0)之间的小数 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//终止所有程序</span><span class="token class-name">Student</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要自己在Student类里重写</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一般输出用</span><span class="token class-name">Student</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断两个内容是否相同，也需要自己重写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="12-int-String-String-int"><a href="#12-int-String-String-int" class="headerlink" title="12.int-&gt;String  String-&gt;int"></a>12.int-&gt;String  String-&gt;int</h2><p>p203</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">""</span><span class="token operator">+</span>num<span class="token punctuation">;</span><span class="token class-name">Integer</span> i<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">int</span> x<span class="token operator">=</span>i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-日期-过时"><a href="#13-日期-过时" class="headerlink" title="13.日期&#x2F;&#x2F;过时"></a>13.日期&#x2F;&#x2F;过时</h2><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>p206</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> d1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出现在的时间，字符串类型</span><span class="token keyword">long</span> data<span class="token operator">=</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出系统时加上你传的时间，字符串类型</span><span class="token class-name">Date</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token comment">//返回当前时间到系统时的毫秒值</span><span class="token keyword">long</span> time<span class="token operator">=</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出系统时加上你传的时间，字符串类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><p>p209</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Date->String</span><span class="token class-name">Data</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> sdf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置返回格式(随意设置)</span><span class="token class-name">String</span> s<span class="token operator">=</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前时间</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出你设置的类型</span><span class="token comment">//String->Date</span><span class="token class-name">String</span> ss<span class="token operator">=</span><span class="token string">"2024-08-09 11:11:11"</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> sdf2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//严格按照字符串类型格式</span><span class="token class-name">Data</span> dd<span class="token operator">=</span>sdf2<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出Data类型结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test209</p><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>p210</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> c<span class="token operator">=</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多态，得到现在的日期</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前值加上输入的值，可正可负</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置当前时间为</span><span class="token keyword">int</span> year<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//月从0开始算的，所有＋1</span><span class="token keyword">int</span> date<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year<span class="token operator">+</span><span class="token string">"年"</span><span class="token operator">+</span>month<span class="token operator">+</span><span class="token string">"月"</span><span class="token operator">+</span>date<span class="token operator">+</span><span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-异常"><a href="#14-异常" class="headerlink" title="14.异常"></a>14.异常</h2><p>p213</p><h3 id="try……catch"><a href="#try……catch" class="headerlink" title="try……catch"></a>try……catch</h3><p>可以不结束进程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>抛出异常，谁用的时候再处理，最后仍然要用try……catch处理异常</p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>只需在自定义异常类后面继承Exception</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Except</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Except</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Except</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Except</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>n<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Except</span><span class="token punctuation">(</span><span class="token string">"分数有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分数正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test219</p><p>throws：用在类名后（可能有异常）</p><p>throw：用在方法内（一旦使用，必有异常）</p><h2 id="15-集合"><a href="#15-集合" class="headerlink" title="15.集合"></a>15.集合</h2><p>p220</p><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061932202.png"></p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>p221</p><p>可以存储重复元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个新的对象</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加元素</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除指定元素</span>c<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空所有元素</span>        c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找集合中有无该元素</span>c<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否为空，空true非空false</span>        c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test222</p><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//翻转</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机置换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test268</p><p>test271</p><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><p>迭代器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个新的对象</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建迭代器</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>链表？</p><p>有序，可重复</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在指定位置添加元素</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除指定位置元素，并返回删除的元素</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改指定元素为，并返回修改的元素</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回指定位置元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可用for遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法一</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> s<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//二</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">(</span>对应变量类型<span class="token punctuation">)</span> i<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//三</span><span class="token keyword">while</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="列表迭代器"><a href="#列表迭代器" class="headerlink" title="列表迭代器"></a>列表迭代器</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lit<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>lit<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s<span class="token operator">=</span>lit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ArrayList数组"><a href="#ArrayList数组" class="headerlink" title="ArrayList数组"></a>ArrayList数组</h5><h5 id="LinkedList双链表"><a href="#LinkedList双链表" class="headerlink" title="LinkedList双链表"></a>LinkedList双链表</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"javase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将元素加到开头</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出第一个</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出最后一个</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除第一个</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>p238</p><p>无重复元素</p><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><p>如果不重写，和普通集合没有区别，他不可以删除重复元素</p><p>重写后才能删除重复元素</p><p>test247</p><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><p>相较于HashSet，他可以自动排序，也可以重写自定义排序</p><h6 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h6><p>test246，有点类似cmp？</p><h6 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h6><p>test247，跟上面的差不多？</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>p257</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> mp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span><span class="token string">"略略略"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加元素，或修改元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可直接输出</span>mp<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除指定"键"的位置</span>mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空所有元素</span>mp<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断有无该"键"</span>mp<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"略略略"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断有无该"值"</span>mp<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否为空</span>mp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据键获取值</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet<span class="token operator">=</span>mp<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取所有键的集合</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> value<span class="token operator">=</span>mp<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取所有值的集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Map的遍历"><a href="#Map的遍历" class="headerlink" title="Map的遍历"></a>Map的遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到所有键</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token operator">:</span>keySet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> value<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据键找值</span><span class="token punctuation">&#125;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entrySet<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> me<span class="token operator">:</span>entrySet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> key<span class="token operator">=</span>me<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> value<span class="token operator">=</span>me<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><p>test266</p><p>与Map完全相同</p><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><p>可进行自然排序，也可重写，自定义排序</p><h2 id="16-泛型"><a href="#16-泛型" class="headerlink" title="16.泛型"></a>16.泛型</h2><p>p251</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>格式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span>  类名<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//之后跟普通的一模一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>好处：可以传任意的参数</p><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> 方法名<span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//之后和普通的一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>好处：不用多次创建类</p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> 类名<span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061932907.png"></p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>参数的数量可变</p><p>格式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> 类名<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//转化成数组了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：一个方法包含多个可变参数，可变参数要放到最后</p><h4 id="可变参数的使用"><a href="#可变参数的使用" class="headerlink" title="可变参数的使用"></a>可变参数的使用</h4><h5 id="Arrays-1"><a href="#Arrays-1" class="headerlink" title="Arrays"></a>Arrays</h5><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061932594.png"></p><p>使用方法：</p><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061932308.png"></p><h5 id="List-1"><a href="#List-1" class="headerlink" title="List"></a>List</h5><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061932971.png"></p><p>使用方法：</p><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061932992.png"></p><h5 id="Set-1"><a href="#Set-1" class="headerlink" title="Set"></a>Set</h5><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061932725.png"></p><p>使用方法：</p><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061932365.png"></p><h2 id="17-file"><a href="#17-file" class="headerlink" title="17.file"></a>17.file</h2><p>绝对路径：完整的路径名</p><p>相对路径：只需他前面的路径名即可\\容易找错吧</p><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><p>test272</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\java1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建file实例，先给个路径，之后再用方法处理他</span><span class="token comment">//在D:\\程序\\java目录下创建文件java1.txt</span>f1<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果文件存在就返回false</span><span class="token comment">//如果文件不存在就创建文件返回true--不能创建文件名字一样的文件</span><span class="token comment">//在D:\\程序\\java目录下创建目录JavaSE</span><span class="token class-name">File</span> f2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\JavaSE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f2<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果目录存在就返回false</span><span class="token comment">//如果目录不存在就创建文件返回true---如果最后一个之前的不存在就要用下面的</span><span class="token comment">//在D:\\程序\\java目录下创建"多级"目录JavaWEB\\HTML</span><span class="token class-name">File</span> f3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\JavaWEB\\HTML"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f3<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果目录存在就返回false</span><span class="token comment">//如果目录不存在就创建文件返回true--不关有几个文件不存在，全部都创建</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"untitled\\java.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否为目录</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否为文件</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断此路径所表示的文件是否存在</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回此路经的绝对路径"字符串"</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转化为字符串返回</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回此路径表示的文件或者目录的名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sArray<span class="token operator">=</span>f4<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span>sArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只能得到所有名称</span><span class="token punctuation">&#125;</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fArray<span class="token operator">=</span>f4<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> fa<span class="token operator">:</span>fArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//可以判断是不是文件，而只输出文件或者目录</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fa<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f5<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\java2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f5<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f5<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除指定文件或目录</span><span class="token comment">//但是！如果目录下有文件，需要先将文件删除才能删除目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="①字节流"><a href="#①字节流" class="headerlink" title="①字节流"></a>①字节流</h3><p>必须关闭字节流close()</p><h4 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建文件并指向他</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入字节，记事本打开是字符</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span><span class="token string">"abcd"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引1写倒3</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放资源，"必做"操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test280</p><h5 id="换行，追加使用"><a href="#换行，追加使用" class="headerlink" title="换行，追加使用"></a>换行，追加使用</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> fos1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\fos1.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//追加写入，在后面加true</span>fos1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行符\r\n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span><span class="token comment">//方法一  很慢</span><span class="token keyword">int</span> by<span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>by <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>by<span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法二较快</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//必做</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test284</p><h4 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h4><p>提高效率</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//写入</span><span class="token class-name">BufferedOutputStream</span> bos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span>bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"world\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读出</span><span class="token class-name">BufferedInputStream</span> bis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②字符流"><a href="#②字符流" class="headerlink" title="②字符流"></a>②字符流</h3><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061933012.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//输入</span><span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\ows.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//FileWriter osw1=new FileWriter("D:\\程序\\java\\test1.txt");</span><span class="token comment">//输出</span><span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\ows.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//FileReader isr1=new FileReader("D:\\程序\\untitled");</span><span class="token comment">//以上简写</span>osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"abcde"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入</span>osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新流</span><span class="token comment">//方法一</span><span class="token keyword">int</span> ch<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//方法二</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读出</span><span class="token punctuation">&#125;</span>osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//读出，“”里面填路径</span><span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入</span><span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//FileWriter osw1=new FileWriter("D:\\程序\\java\\test1.txt");简写</span>                                                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h4><h5 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简写</span><span class="token class-name">BufferedWriter</span> bw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\程序\\java\\java1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"helloworld\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入</span>bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行符类似\r\n</span>bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//简写，里面填路径</span><span class="token keyword">int</span> ch<span class="token punctuation">;</span><span class="token comment">//while((ch=br.read())!=-1)&#123;</span><span class="token comment">//    System.out.println((char)ch);</span><span class="token comment">//&#125;方法一</span><span class="token comment">/*char[] chars=new char[1024];while((ch=br.read(chars))!=-1)&#123;    System.out.print(new String(chars,0,ch))  ;&#125;方法二*/</span><span class="token comment">//String s=br.readLine();//一次读一行</span><span class="token comment">//遍历</span><span class="token comment">//方法三最常用</span><span class="token class-name">String</span> s<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test301</p><h3 id="③集合到文件"><a href="#③集合到文件" class="headerlink" title="③集合到文件"></a>③集合到文件</h3><p>test303</p><h4 id="文件到集合"><a href="#文件到集合" class="headerlink" title="文件到集合"></a>文件到集合</h4><p>test304</p><h3 id="④复制单个文件夹"><a href="#④复制单个文件夹" class="headerlink" title="④复制单个文件夹"></a>④复制单个文件夹</h3><p>test309</p><h4 id="复制多级文件夹"><a href="#复制多级文件夹" class="headerlink" title="复制多级文件夹"></a>复制多级文件夹</h4><p>test310</p><h3 id="⑤字节打印流"><a href="#⑤字节打印流" class="headerlink" title="⑤字节打印流"></a>⑤字节打印流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建对象</span><span class="token class-name">PrintWriter</span> pw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出数据</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑥对象序列化流"><a href="#⑥对象序列化流" class="headerlink" title="⑥对象序列化流"></a>⑥对象序列化流</h3><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建对象，写入</span><span class="token class-name">ObjectOutputStream</span> out<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"qqq"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//序列化</span>out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建对象，读出</span><span class="token class-name">ObjectInputStream</span> ois<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建接收变量</span><span class="token class-name">Object</span> obj<span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改格式</span><span class="token class-name">Student</span> s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token comment">//固定ID</span><span class="token comment">//如果不想让这个值序列化</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//不参与序列化过程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="18-Properties"><a href="#18-Properties" class="headerlink" title="18.Properties"></a>18.Properties</h2><p>类似Map</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span><span class="token string">"qqq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入元素，都是Object类型</span><span class="token comment">//取出键</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key:"</span> <span class="token operator">+</span> key<span class="token operator">+</span><span class="token string">",value:"</span> <span class="token operator">+</span> prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特有用法"><a href="#特有用法" class="headerlink" title="特有用法"></a>特有用法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加入元素，但都是String类型</span>prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"004"</span><span class="token punctuation">,</span><span class="token string">"eee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据键得到值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"004"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到键的集合，都是String类型</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key:"</span> <span class="token operator">+</span> key<span class="token operator">+</span><span class="token string">",value:"</span> <span class="token operator">+</span> prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="与文件结合"><a href="#与文件结合" class="headerlink" title="与文件结合"></a>与文件结合</h3><h4 id="prop-store-“File”-null"><a href="#prop-store-“File”-null" class="headerlink" title="prop.store(“File”,null);"></a>prop.store(“File”,null);</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入路径名</span><span class="token comment">//往集合里面插入元素之后再写入文件</span>prop<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>fw<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="prop-lode"><a href="#prop-lode" class="headerlink" title="prop.lode();"></a>prop.lode();</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileReader</span> fr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写路径名</span>prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把文件里面的数据读出来</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出到面板上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-线程"><a href="#19-线程" class="headerlink" title="19.线程"></a>19.线程</h2><p>p324</p><h3 id="多线程的实现"><a href="#多线程的实现" class="headerlink" title="多线程的实现"></a>多线程的实现</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>创建一个类，继承Thread</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建两个对象，这个名字随便取，这是你创建得其他类</span><span class="token class-name">MyThread</span> my1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MyThread</span> my2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开始执行两个线程</span>my1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="设置和获取名称"><a href="#设置和获取名称" class="headerlink" title="设置和获取名称"></a>设置和获取名称</h5><p>test326</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设置名称</span>my1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"站"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"累了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取名称</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造时直接赋值//需要在引用变量里面写带参构造方法</span><span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">MyThread</span> my1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"qqq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//就可以带参构造了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><p>test327</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//范围1-10，越高越快，但只是几率大</span>my1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my3<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行之后，该线程停止100s再继续进行</span>my1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当my1执行结束之后其他线程才可继续进行</span><span class="token comment">//设置主线程</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将ddd设置为主线程</span><span class="token comment">//将1，2，3设置为守护线程，主线程如果结束，守护线程很快就会结束</span>my1<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my2<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my3<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//主线程的操作</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span>；<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法二：较好"><a href="#方法二：较好" class="headerlink" title="方法二：较好"></a>方法二：较好</h4><p>实现Runnable接口</p><p>可以实现多个接口，但是继承只能有一个，物以稀为贵</p><p>创建一个类实现实现Runnable接口，然后调用他</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">My</span> my<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Thread</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"qqq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Thread</span> t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到线程名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p><img src="https://jsd.onmicrosoft.cn/gh/zhouzhou1o/tuchuang@main/img/202408061933128.png"></p><h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><p>test333</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//锁</span><span class="token comment">//方法也可以锁住，在方法前面加synchronized即可</span><span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程安全的类"><a href="#线程安全的类" class="headerlink" title="线程安全的类"></a>线程安全的类</h4><p>如果考虑线程安全，可以用以下代替</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuffer</span><span class="token operator">-></span><span class="token class-name">StringBuilder</span><span class="token punctuation">;</span><span class="token class-name">Vector</span><span class="token operator">-></span> <span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token class-name">Hashtable</span><span class="token operator">-></span> <span class="token class-name">HashMap</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Lock</span> lk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lk<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lk<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>test336</p><h4 id="wait-，notifyAll"><a href="#wait-，notifyAll" class="headerlink" title="wait()，notifyAll();"></a>wait()，notifyAll();</h4><p>等待，唤醒</p><h2 id="20-网络"><a href="#20-网络" class="headerlink" title="20.网络"></a>20.网络</h2><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><p>p339</p><h4 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h4><ol><li>IP地址：每台设备的标识</li><li>端口：应用程序（APP）的标识</li><li>协议：双方遵守的规则</li></ol><h5 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h5><p>常用命令：</p><ol><li>ipconfig：查看本机地址</li><li>ping IP地址：检查网络是否连通</li></ol><p>特殊IP地址：</p><p>​127.0.0.1：代表本机地址，一般用来测试使用</p><h6 id="得到IP地址"><a href="#得到IP地址" class="headerlink" title="得到IP地址"></a>得到IP地址</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//可以是主机名，也可以是IP地址</span><span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"周周的电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> ip <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取IP地址</span><span class="token class-name">String</span> name <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取主机名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h5><p>UDP：传输音频等不重要或丢失无太大印象的数据</p><p>TCP：传输重要数据（三次握手）</p><h3 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h3><h4 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h4><p>test344</p><p>步骤：</p><ol><li>创建发送端DatagramSocket ds &#x3D; new DatagramSocket(); </li><li>创建数据，并打包byte[] buf &#x3D; “Hello World,我来了”.getBytes();</li><li>调用   DatagramSocket   对象方法发送数据  ds.send(dp)</li><li>关闭发送端</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建发送端对象</span><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建数据并打包</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token string">"Hello World,我来了"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InetAddress</span> address<span class="token operator">=</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.1.3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">,</span>address<span class="token punctuation">,</span><span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送数据</span>ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭发送端</span>ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h4><p>步骤：</p><ol><li>创建接收端对象   DatagramSocket</li><li>创建数据包接收数据   </li><li>调用   DatagramSocket   方法接收数据</li><li>解析，并显示</li><li>关闭接收端</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建接收端对象</span><span class="token class-name">DatagramSocket</span> ds<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//端口，发送到10086</span><span class="token comment">//创建一个接收包,接收数据</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">DatagramPacket</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用DatagramSocket方法接收数据</span>ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭客户端</span>ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进阶版：test346</p><h3 id="TCP通讯"><a href="#TCP通讯" class="headerlink" title="TCP通讯"></a>TCP通讯</h3><p>test347</p><h4 id="发送数据-1"><a href="#发送数据-1" class="headerlink" title="发送数据"></a>发送数据</h4><p>步骤：</p><ol><li>创建客户端 （Socket）</li><li>获取输出流，写数据  OutputStream os &#x3D; s.getOutputStream();</li><li>关闭客户端  s.close();</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"192.168.169.7"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传一次</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"我来了"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接收反馈</span><span class="token class-name">InputStream</span> is<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接收数据-1"><a href="#接收数据-1" class="headerlink" title="接收数据"></a>接收数据</h4><p>步骤：</p><ol><li>创建服务器端对象（ServerSocket）</li><li>监听客户端连接，返回Socket对象   Socket s&#x3D;ss.accept();</li><li>获取输入流，读数据，并显示</li><li>释放资源</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServerSocket</span> ss<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s<span class="token operator">=</span>ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读一次</span><span class="token class-name">InputStream</span> is<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给反馈</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"收到"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进阶版：test350</p><h2 id="21-Lambda"><a href="#21-Lambda" class="headerlink" title="21.Lambda"></a>21.Lambda</h2><p>p355</p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ol><li>使用Lambda，接口只能有一个抽象方法</li><li>只有接口才能用Lambda</li></ol><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>(形参)-&gt;代码块</p><ol><li>形参：多个参数时逗号隔开即可</li><li>-&gt;：指向动作</li><li>代码块：以前写的方法体内容</li></ol><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//匿名内部类</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Lambda表达式</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>形参的类型可以省略</li><li>如果参数只有一个，形参的小括号可以省略</li><li>如果代码块只有一条语句，大括号和分号也可以省略，如果语句有return，return也省略掉</li></ol><p>test357</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>p363</p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ol><li>常量   public static final</li><li>抽象方法   public abstract</li><li>默认方法</li><li>静态方法</li><li>私有方法（Java)</li></ol><h4 id="接口的默认方法"><a href="#接口的默认方法" class="headerlink" title="接口的默认方法"></a>接口的默认方法</h4><p>用处：在接口功能不能满足用户需求时，又要考虑代码的维护，而新建一个默认方法，以便于不需要给所有实现该接口的方法重写。</p><p>注意：你不能在实现两个接口的同时，在不同接口写相同名字的默认方法，会报错</p><p>如果一个类直接实现了两个接口，并且这两个接口都定义了相同名称的默认方法，那么编译器会报错，因为它不知道应该使用哪个接口的默认实现。</p><p>test364</p><h4 id="接口中的静态方法"><a href="#接口中的静态方法" class="headerlink" title="接口中的静态方法"></a>接口中的静态方法</h4><p>静态方法只能通过接口名调用，不能通过实现类名或对象名调用</p><p>就是上面描述的默认方法的问题</p><h4 id="接口中的私有方法"><a href="#接口中的私有方法" class="headerlink" title="接口中的私有方法"></a>接口中的私有方法</h4><p>我觉得私有方法   用静态static比较好</p><p>用法：接口中有多个抽象类有相同的内容时，创建一个私有方法来省略相同内容</p><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>方法引用符::</p><p>讲不清楚，直接看代码吧</p><p>test368-&gt;372</p><h2 id="22-函数式接口"><a href="#22-函数式接口" class="headerlink" title="22.函数式接口"></a>22.函数式接口</h2><p>p373</p><p>有且仅有一个抽象方法</p><p>建议在接口上方加入注解@FunctionalInterface，会帮助检测是不是函数式接口</p><h3 id="函数式接口作为方法的参数"><a href="#函数式接口作为方法的参数" class="headerlink" title="函数式接口作为方法的参数"></a>函数式接口作为方法的参数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sun</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果方法的参数是函数式接口，可以将Lambda表达式作为参数传递</p><pre class="line-numbers language-none"><code class="language-none">sun(   ()-&gt; System.out.println(&quot;OK&quot;)   );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="函数式接口作为方法的返回值"><a href="#函数式接口作为方法的返回值" class="headerlink" title="函数式接口作为方法的返回值"></a>函数式接口作为方法的返回值</h3><p>如果方法的返回值是一个函数式接口，我们可以用Lambda表达式作为结果返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token operator">-></span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="常用函数式接口"><a href="#常用函数式接口" class="headerlink" title="常用函数式接口"></a>常用函数式接口</h3><p>p376</p><p>直接看代码吧，真说不清</p><h4 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h4><p>用他做形参，可返回一个泛型的数据supplier.get()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p>用他做形参,得到一个一模一样的另一个参数的值（我也不知道有啥用</p><p>accept();&#x2F;&#x2F;获取括号里面的值</p><p>s1.andThen(s2);&#x2F;&#x2F;一起一起都拿都拿</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s1<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Predicates"><a href="#Predicates" class="headerlink" title="Predicates"></a>Predicates</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否满足条件</span>p<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于&amp;&amp;</span>p<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于||</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">b<span class="token operator">=</span><span class="token function">check2</span><span class="token punctuation">(</span><span class="token string">"abcdefgjk"</span><span class="token punctuation">,</span>s<span class="token operator">-></span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token operator">-></span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check2</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> p<span class="token punctuation">,</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> p2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于&amp;&amp;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token comment">//左边是传进来的类型，右边是结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转换类型的时候用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="23-Stream流"><a href="#23-Stream流" class="headerlink" title="23.Stream流"></a>23.Stream流</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>生成操作，例如：list.stream();</li><li>中间操作，目的：过滤，filter();</li><li>终结操作，forEach();</li></ol><h4 id="常见生成方式"><a href="#常见生成方式" class="headerlink" title="常见生成方式"></a>常见生成方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Collections集合</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Map集合</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream3 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream4 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream5 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"asd"</span><span class="token punctuation">,</span><span class="token string">"zxc"</span><span class="token punctuation">,</span><span class="token string">"qwe"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream6 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream7 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"aba"</span><span class="token punctuation">,</span><span class="token string">"asd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream8 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常见中间操作"><a href="#常见中间操作" class="headerlink" title="常见中间操作"></a>常见中间操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//筛选</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">//创建stream流 连着的，太长了我就截开了</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-></span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">//筛选第一个字是张的集合</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-></span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">//筛选长度是3的集合</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//终止操作，输出筛选后的结果</span><span class="token comment">//限制前三个元素输出来</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//跳过前三个输出</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//跳过前两个，输出跳过后的前两个</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用了应该就真的合并了，下面俩条语句共有两个合并，会报错，用一个就行了</span><span class="token comment">//合并两个流</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并并删除流中重复元素distinct前面必须有concat搭配，不然不让用</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按字母顺序排</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先按长度排，再按字母排</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num2<span class="token operator">=</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">:</span>num<span class="token punctuation">;</span>    <span class="token keyword">return</span> num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换类型</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-></span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只能转换成int类型</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回元素总和，只有int才能用</span><span class="token keyword">int</span> ans<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常见终结操作"><a href="#常见终结操作" class="headerlink" title="常见终结操作"></a>常见终结操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放回元素个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="收集操作"><a href="#收集操作" class="headerlink" title="收集操作"></a>收集操作</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>把终结操作删了，就可以在最前面加入Stream s&#x3D;</p><p>就可以得到Stream流了</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在操作前面加入collect</p><p>然后用Collector.toList或者Collector.toSet或者Collector.toMap转换</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"qqq,13"</span><span class="token punctuation">,</span><span class="token string">"www,15"</span><span class="token punctuation">,</span><span class="token string">"sss,18"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//年龄大于14的</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> st<span class="token operator">=</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ss<span class="token operator">-></span><span class="token class-name">Integer</span><span class="token punctuation">.</span>                                      <span class="token function">parseInt</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把上面的流收集到Map里面</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token operator">=</span>    st<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>ss<span class="token operator">-></span>ss<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                ss<span class="token operator">-></span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-反射"><a href="#24-反射" class="headerlink" title="24.反射"></a>24.反射</h2><p>p398</p><h3 id="反射获取Class文件"><a href="#反射获取Class文件" class="headerlink" title="反射获取Class文件"></a>反射获取Class文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法1</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> c1<span class="token operator">=</span><span class="token class-name">Student</span><span class="token punctuation">.</span>calss<span class="token punctuation">;</span><span class="token comment">//方法2</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c2<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//文件全路径名</span><span class="token comment">//方法3</span><span class="token class-name">Student</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> c3<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="①反射获取构造方法"><a href="#①反射获取构造方法" class="headerlink" title="①反射获取构造方法"></a>①反射获取构造方法</h3><p><strong>（建议全用私有！！）</strong></p><p>test399，demo1-3</p><h4 id="获取公共方法"><a href="#获取公共方法" class="headerlink" title="获取公共方法"></a>获取公共方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取所有公共的构造函数</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> cons <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取所有构造函数</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> cons <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">:</span> cons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取单个的构造方法，里面写想要用的构造方法的参数</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里拿的是无参构造，所以括号里面没东西</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取私有方法创建对象"><a href="#获取私有方法创建对象" class="headerlink" title="获取私有方法创建对象"></a>获取私有方法创建对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取单个的构造方法，里面写想要用的构造方法的参数</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//暴力反射</span>con<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//值为true，取消访问检查</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②反射获取成员变量"><a href="#②反射获取成员变量" class="headerlink" title="②反射获取成员变量"></a>②反射获取成员变量</h3><p>Demo4-5</p><p><strong>建议全部都用私有方法的访问，可以访问所有的变量</strong></p><p>test399，demo4</p><h4 id="获取公共成员变量"><a href="#获取公共成员变量" class="headerlink" title="获取公共成员变量"></a>获取公共成员变量</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取公共变量</span><span class="token class-name">Field</span> addressfield <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//括号内是你要拿的变量名字</span><span class="token comment">//获取无参构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给obj的成员变量address赋值为HanDan</span>addressfield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"HanDan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取私有成员变量"><a href="#获取私有成员变量" class="headerlink" title="获取私有成员变量"></a>获取私有成员变量</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"test399.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取无参构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取私有变量</span><span class="token class-name">Field</span> namefiled <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namefiled<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namefiled<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"qqq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="③反射获取成员方法"><a href="#③反射获取成员方法" class="headerlink" title="③反射获取成员方法"></a>③反射获取成员方法</h3><p><strong>建议全用私有</strong></p><h4 id="获取公共成员方法"><a href="#获取公共成员方法" class="headerlink" title="获取公共成员方法"></a>获取公共成员方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"test399.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取公共方法</span><span class="token class-name">Method</span> m<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取无参构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用obj对象的m方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取私有成员方法"><a href="#获取私有成员方法" class="headerlink" title="获取私有成员方法"></a>获取私有成员方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//私有方法</span><span class="token class-name">Method</span> m4<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m4<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m4<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用反射运行文件指定内容"><a href="#利用反射运行文件指定内容" class="headerlink" title="利用反射运行文件指定内容"></a>利用反射运行文件指定内容</h3><p>test407</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生语录</title>
      <link href="/2024/08/06/qi-ta/ge-yan/"/>
      <url>/2024/08/06/qi-ta/ge-yan/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8ccb53581b06fc49ae713b7cdb7c553ed3294a8d2b57aaac53ce7aa17e8fa316"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 二次元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客</title>
      <link href="/2024/08/05/qi-ta/da-jian-bo-ke/"/>
      <url>/2024/08/05/qi-ta/da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>趁着我还没忘，赶紧写一篇简易版的教程吧</p><p><strong>我只是大概梳理一下流程，真要看具体实现的话，建议直接拉到最下面</strong></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>第一步是最痛苦的一步（这就是传说中的万事开头难吗）😢😢</p><p>需要的软件分别是<strong>Git，Node.js和hexo</strong></p><p><strong>注意</strong>：其中hexo是最最最麻烦的！💢💢</p><h4 id="安装过程中遇到问题的解决方案"><a href="#安装过程中遇到问题的解决方案" class="headerlink" title="安装过程中遇到问题的解决方案"></a>安装过程中遇到问题的解决方案</h4><ol><li><p>安装软件的时候最好找个b站上的视频看看教程，跟着走，能避免大部分错误，看看弹幕和评论可以解决不少问题</p></li><li><p>还有，如果报错了，可以直接copy到ai那里让他给你解释，也会提供解决方案。<strong>（这是最主要的）</strong></p><p>唉，真就是年少不知AI好。🤣</p></li><li><p>还有，可以找一些比较新的视频，可能会遇到一些版本问题？虽然我还没遇到</p></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>然后就是配置那些安装的软件，此时一定会遇到相当多的问题。</p><p>不要怕，把错误复制到AI那里，什么都可以问，真的万能！</p><p>需要注意的就是hexo最后上传的时候会遇到网络问题，没什么好办法，只能多试几次了</p><p>（上传的时候不能开<strong>steam++<strong>加速</strong>github</strong>会直接<strong>over</strong>的）</p><h1 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h1><p>安装配置完之后，就该个性化我们的博客了</p><p>主题一般都是直接把别人的拿来就行了，自己找找喜欢的</p><p>我用的是<a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a>的主题，因为我懒，所以直接找的教程里面推荐的主题</p><p>一般去网上，b站上都能搜到，<strong>注意本篇用的hexo</strong>，好像不同的还不太一样</p><h2 id="解决代码高亮问题"><a href="#解决代码高亮问题" class="headerlink" title="解决代码高亮问题"></a>解决代码高亮问题</h2><p><strong>硬控我一整天！</strong>💢💢💢💢💢💢💢💢💢</p><p>根目录的config，hexo 7.0.0以上 好像把代码高亮的东西改了</p><pre class="line-numbers language-none"><code class="language-none">syntax_highlighter: prismjs # or highlight.jshighlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: false  tab_replace: &#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外要确保你的主题是最新的，我的就是几年前的那个版本，然后手动改了好多文件才搞好的。qwq</p><h3 id="另一种方式建博客"><a href="#另一种方式建博客" class="headerlink" title="另一种方式建博客"></a>另一种方式建博客</h3><p>我发现<strong>hexo</strong>好像可以被<strong>wordpress</strong>代替，这个好像比hexo操作起来简单好多，毕竟谁也不想在几千行代码里面去改原来的主题吧。</p><p>有一说一，原来那个主题有点像小黄网站，而且！往下一拉，全是亮绿色😒，真服了，不如我的小粉（欸嘿）</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>本篇改编自<a href="https://blog.csdn.net/qq_58608526/article/details/124652412?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169451162116800186514102%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169451162116800186514102&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124652412-null-null.142">传送门</a>这个人写的，写的还挺详细的，就看1，2部分就行了，3没啥用</p><p>还有一个<a href="https://blog.fiveth.cc/p/bb32/">带b站视频的</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery">主题文件</a>在这里，<a href="https://zhouzhou1o.github.io/">我的博客</a>在这里</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初始博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2024/08/03/qi-ta/hello-world/"/>
      <url>/2024/08/03/qi-ta/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这是我第一次创建博客，过程还是……嗯，感觉好麻烦啊！</p><p>那就来个经典的</p><h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初始博客 </tag>
            
            <tag> 生活琐事 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
